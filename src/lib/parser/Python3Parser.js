// Generated from Python3Parser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import Python3ParserListener from './Python3ParserListener.js';
import Python3ParserVisitor from './Python3ParserVisitor.js';

import Python3ParserBase from './Python3ParserBase.js';

const serializedATN = [4,1,102,1435,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,1,0,1,0,1,0,1,0,1,0,3,0,244,8,0,1,1,1,1,5,1,248,8,1,10,1,12,
1,251,9,1,1,1,1,1,1,2,1,2,5,2,257,8,2,10,2,12,2,260,9,2,1,2,1,2,1,3,1,3,
1,3,1,3,3,3,268,8,3,1,3,3,3,271,8,3,1,3,1,3,1,4,4,4,276,8,4,11,4,12,4,277,
1,5,1,5,1,5,1,5,3,5,284,8,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,3,7,294,8,7,
1,7,1,7,1,7,1,8,1,8,3,8,301,8,8,1,8,1,8,1,9,1,9,1,9,3,9,308,8,9,1,9,1,9,
1,9,1,9,3,9,314,8,9,5,9,316,8,9,10,9,12,9,319,9,9,1,9,1,9,1,9,3,9,324,8,
9,1,9,1,9,1,9,1,9,3,9,330,8,9,5,9,332,8,9,10,9,12,9,335,9,9,1,9,1,9,1,9,
1,9,3,9,341,8,9,3,9,343,8,9,3,9,345,8,9,1,9,1,9,1,9,3,9,350,8,9,3,9,352,
8,9,3,9,354,8,9,1,9,1,9,3,9,358,8,9,1,9,1,9,1,9,1,9,3,9,364,8,9,5,9,366,
8,9,10,9,12,9,369,9,9,1,9,1,9,1,9,1,9,3,9,375,8,9,3,9,377,8,9,3,9,379,8,
9,1,9,1,9,1,9,3,9,384,8,9,3,9,386,8,9,1,10,1,10,1,10,3,10,391,8,10,1,11,
1,11,1,11,3,11,396,8,11,1,11,1,11,1,11,1,11,3,11,402,8,11,5,11,404,8,11,
10,11,12,11,407,9,11,1,11,1,11,1,11,3,11,412,8,11,1,11,1,11,1,11,1,11,3,
11,418,8,11,5,11,420,8,11,10,11,12,11,423,9,11,1,11,1,11,1,11,1,11,3,11,
429,8,11,3,11,431,8,11,3,11,433,8,11,1,11,1,11,1,11,3,11,438,8,11,3,11,440,
8,11,3,11,442,8,11,1,11,1,11,3,11,446,8,11,1,11,1,11,1,11,1,11,3,11,452,
8,11,5,11,454,8,11,10,11,12,11,457,9,11,1,11,1,11,1,11,1,11,3,11,463,8,11,
3,11,465,8,11,3,11,467,8,11,1,11,1,11,1,11,3,11,472,8,11,3,11,474,8,11,1,
12,1,12,1,13,1,13,3,13,480,8,13,1,14,1,14,1,14,5,14,485,8,14,10,14,12,14,
488,9,14,1,14,3,14,491,8,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
1,15,3,15,503,8,15,1,16,1,16,1,16,1,16,1,16,3,16,510,8,16,1,16,1,16,1,16,
3,16,515,8,16,5,16,517,8,16,10,16,12,16,520,9,16,3,16,522,8,16,1,17,1,17,
1,17,1,17,3,17,528,8,17,1,18,1,18,3,18,532,8,18,1,18,1,18,1,18,3,18,537,
8,18,5,18,539,8,18,10,18,12,18,542,9,18,1,18,3,18,545,8,18,1,19,1,19,1,20,
1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,3,22,559,8,22,1,23,1,23,1,24,
1,24,1,25,1,25,3,25,567,8,25,1,26,1,26,1,27,1,27,1,27,1,27,3,27,575,8,27,
3,27,577,8,27,1,28,1,28,3,28,581,8,28,1,29,1,29,1,29,1,30,1,30,5,30,588,
8,30,10,30,12,30,591,9,30,1,30,1,30,4,30,595,8,30,11,30,12,30,596,3,30,599,
8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,608,8,30,1,31,1,31,1,31,3,31,
613,8,31,1,32,1,32,1,32,3,32,618,8,32,1,33,1,33,1,33,5,33,623,8,33,10,33,
12,33,626,9,33,1,33,3,33,629,8,33,1,34,1,34,1,34,5,34,634,8,34,10,34,12,
34,637,9,34,1,35,1,35,1,35,5,35,642,8,35,10,35,12,35,645,9,35,1,36,1,36,
1,36,1,36,5,36,651,8,36,10,36,12,36,654,9,36,1,37,1,37,1,37,1,37,5,37,660,
8,37,10,37,12,37,663,9,37,1,38,1,38,1,38,1,38,3,38,669,8,38,1,39,1,39,1,
39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,681,8,39,1,40,1,40,1,40,1,40,
3,40,687,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,698,8,41,
10,41,12,41,701,9,41,1,41,1,41,1,41,3,41,706,8,41,1,42,1,42,1,42,1,42,1,
42,1,42,1,42,3,42,715,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
3,43,726,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,4,44,735,8,44,11,44,12,
44,736,1,44,1,44,1,44,3,44,742,8,44,1,44,1,44,1,44,3,44,747,8,44,1,44,1,
44,1,44,3,44,752,8,44,1,45,1,45,1,45,1,45,5,45,758,8,45,10,45,12,45,761,
9,45,1,45,1,45,1,45,1,46,1,46,1,46,3,46,769,8,46,1,47,1,47,1,47,1,47,3,47,
775,8,47,3,47,777,8,47,1,48,1,48,1,48,1,48,4,48,783,8,48,11,48,12,48,784,
1,48,1,48,3,48,789,8,48,1,49,1,49,1,49,1,49,1,49,1,49,4,49,797,8,49,11,49,
12,49,798,1,49,1,49,1,50,1,50,1,50,3,50,806,8,50,1,50,3,50,809,8,50,1,51,
1,51,4,51,813,8,51,11,51,12,51,814,1,51,3,51,818,8,51,1,52,1,52,1,52,3,52,
823,8,52,1,53,1,53,1,53,3,53,828,8,53,1,53,1,53,1,53,1,54,1,54,1,54,1,55,
1,55,3,55,838,8,55,1,56,1,56,3,56,842,8,56,1,57,1,57,1,57,1,57,1,58,1,58,
1,58,5,58,851,8,58,10,58,12,58,854,9,58,1,59,1,59,1,59,1,59,1,59,1,59,1,
59,1,59,3,59,864,8,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,1,60,3,60,874,8,
60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,884,8,61,1,62,1,62,1,62,
1,62,1,62,1,62,1,62,1,62,3,62,894,8,62,1,63,1,63,1,63,3,63,899,8,63,1,64,
1,64,1,64,3,64,904,8,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,68,1,69,
1,69,1,70,1,70,1,70,1,71,1,71,1,71,4,71,923,8,71,11,71,12,71,924,1,72,1,
72,3,72,929,8,72,1,73,1,73,1,73,1,73,1,74,1,74,3,74,937,8,74,1,74,1,74,1,
74,3,74,942,8,74,1,74,3,74,945,8,74,1,75,1,75,1,75,3,75,950,8,75,1,76,1,
76,1,76,5,76,955,8,76,10,76,12,76,958,9,76,1,76,3,76,961,8,76,1,77,1,77,
3,77,965,8,77,1,78,1,78,1,78,1,78,3,78,971,8,78,1,79,1,79,1,79,1,79,1,79,
3,79,978,8,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,987,8,79,1,79,1,79,
1,79,1,79,1,79,3,79,994,8,79,1,79,1,79,3,79,998,8,79,1,80,1,80,1,80,5,80,
1003,8,80,10,80,12,80,1006,9,80,1,81,1,81,3,81,1010,8,81,1,81,1,81,1,81,
1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1026,8,83,1,
83,1,83,1,83,1,83,1,83,1,83,3,83,1034,8,83,1,83,1,83,1,83,1,83,1,83,1,83,
1,83,1,83,3,83,1044,8,83,1,83,1,83,3,83,1048,8,83,1,84,1,84,1,84,5,84,1053,
8,84,10,84,12,84,1056,9,84,1,85,1,85,1,85,5,85,1061,8,85,10,85,12,85,1064,
9,85,1,86,1,86,1,86,1,86,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1076,8,87,1,
87,3,87,1079,8,87,1,88,1,88,3,88,1083,8,88,1,89,1,89,3,89,1087,8,89,1,89,
1,89,1,89,1,90,1,90,3,90,1094,8,90,1,90,1,90,1,90,1,91,1,91,1,91,5,91,1102,
8,91,10,91,12,91,1105,9,91,1,92,1,92,1,92,5,92,1110,8,92,10,92,12,92,1113,
9,92,1,93,1,93,1,93,3,93,1118,8,93,1,94,1,94,1,94,1,94,5,94,1124,8,94,10,
94,12,94,1127,9,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,
1,95,1,95,3,95,1142,8,95,1,96,1,96,1,96,1,97,1,97,1,97,4,97,1150,8,97,11,
97,12,97,1151,1,97,3,97,1155,8,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,5,97,1178,
8,97,10,97,12,97,1181,9,97,1,98,3,98,1184,8,98,1,98,1,98,5,98,1188,8,98,
10,98,12,98,1191,9,98,1,99,1,99,1,99,3,99,1196,8,99,1,99,1,99,1,99,3,99,
1201,8,99,1,99,1,99,1,99,3,99,1206,8,99,1,99,1,99,1,99,1,99,4,99,1212,8,
99,11,99,12,99,1213,1,99,1,99,1,99,1,99,3,99,1220,8,99,1,100,1,100,1,101,
1,101,3,101,1226,8,101,1,101,1,101,1,101,1,101,3,101,1232,8,101,5,101,1234,
8,101,10,101,12,101,1237,9,101,1,101,3,101,1240,8,101,3,101,1242,8,101,1,
102,1,102,3,102,1246,8,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,
1255,8,102,1,103,1,103,1,103,5,103,1260,8,103,10,103,12,103,1263,9,103,1,
103,3,103,1266,8,103,1,104,1,104,3,104,1270,8,104,1,104,1,104,3,104,1274,
8,104,1,104,3,104,1277,8,104,3,104,1279,8,104,1,105,1,105,3,105,1283,8,105,
1,106,1,106,3,106,1287,8,106,1,106,1,106,1,106,3,106,1292,8,106,5,106,1294,
8,106,10,106,12,106,1297,9,106,1,106,3,106,1300,8,106,1,107,1,107,1,107,
5,107,1305,8,107,10,107,12,107,1308,9,107,1,107,3,107,1311,8,107,1,108,1,
108,1,108,1,108,1,108,1,108,3,108,1319,8,108,1,108,1,108,1,108,1,108,1,108,
1,108,1,108,1,108,3,108,1329,8,108,5,108,1331,8,108,10,108,12,108,1334,9,
108,1,108,3,108,1337,8,108,3,108,1339,8,108,1,108,1,108,3,108,1343,8,108,
1,108,1,108,1,108,1,108,3,108,1349,8,108,5,108,1351,8,108,10,108,12,108,
1354,9,108,1,108,3,108,1357,8,108,3,108,1359,8,108,3,108,1361,8,108,1,109,
1,109,1,109,1,109,3,109,1367,8,109,1,109,3,109,1370,8,109,1,109,1,109,1,
109,1,110,1,110,1,110,5,110,1378,8,110,10,110,12,110,1381,9,110,1,110,3,
110,1384,8,110,1,111,1,111,3,111,1388,8,111,1,111,1,111,1,111,1,111,1,111,
1,111,1,111,1,111,3,111,1398,8,111,1,112,1,112,3,112,1402,8,112,1,113,3,
113,1405,8,113,1,113,1,113,1,113,1,113,1,113,3,113,1412,8,113,1,114,1,114,
1,114,3,114,1417,8,114,1,115,1,115,1,116,1,116,3,116,1423,8,116,1,117,1,
117,1,117,3,117,1428,8,117,1,118,4,118,1431,8,118,11,118,12,118,1432,1,118,
0,1,194,119,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,
202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,
0,7,1,0,88,100,1,0,54,55,2,0,71,72,76,76,3,0,56,56,73,75,86,86,1,0,71,72,
1,0,69,70,3,0,30,30,40,40,45,45,1586,0,243,1,0,0,0,2,249,1,0,0,0,4,254,1,
0,0,0,6,263,1,0,0,0,8,275,1,0,0,0,10,279,1,0,0,0,12,285,1,0,0,0,14,288,1,
0,0,0,16,298,1,0,0,0,18,385,1,0,0,0,20,387,1,0,0,0,22,473,1,0,0,0,24,475,
1,0,0,0,26,479,1,0,0,0,28,481,1,0,0,0,30,502,1,0,0,0,32,504,1,0,0,0,34,523,
1,0,0,0,36,531,1,0,0,0,38,546,1,0,0,0,40,548,1,0,0,0,42,551,1,0,0,0,44,558,
1,0,0,0,46,560,1,0,0,0,48,562,1,0,0,0,50,564,1,0,0,0,52,568,1,0,0,0,54,570,
1,0,0,0,56,580,1,0,0,0,58,582,1,0,0,0,60,585,1,0,0,0,62,609,1,0,0,0,64,614,
1,0,0,0,66,619,1,0,0,0,68,630,1,0,0,0,70,638,1,0,0,0,72,646,1,0,0,0,74,655,
1,0,0,0,76,664,1,0,0,0,78,680,1,0,0,0,80,682,1,0,0,0,82,688,1,0,0,0,84,707,
1,0,0,0,86,716,1,0,0,0,88,727,1,0,0,0,90,753,1,0,0,0,92,765,1,0,0,0,94,770,
1,0,0,0,96,788,1,0,0,0,98,790,1,0,0,0,100,808,1,0,0,0,102,810,1,0,0,0,104,
822,1,0,0,0,106,824,1,0,0,0,108,832,1,0,0,0,110,837,1,0,0,0,112,841,1,0,
0,0,114,843,1,0,0,0,116,847,1,0,0,0,118,863,1,0,0,0,120,873,1,0,0,0,122,
883,1,0,0,0,124,893,1,0,0,0,126,898,1,0,0,0,128,903,1,0,0,0,130,905,1,0,
0,0,132,907,1,0,0,0,134,909,1,0,0,0,136,911,1,0,0,0,138,914,1,0,0,0,140,
916,1,0,0,0,142,919,1,0,0,0,144,928,1,0,0,0,146,930,1,0,0,0,148,944,1,0,
0,0,150,946,1,0,0,0,152,951,1,0,0,0,154,964,1,0,0,0,156,970,1,0,0,0,158,
997,1,0,0,0,160,999,1,0,0,0,162,1009,1,0,0,0,164,1014,1,0,0,0,166,1047,1,
0,0,0,168,1049,1,0,0,0,170,1057,1,0,0,0,172,1065,1,0,0,0,174,1078,1,0,0,
0,176,1082,1,0,0,0,178,1084,1,0,0,0,180,1091,1,0,0,0,182,1098,1,0,0,0,184,
1106,1,0,0,0,186,1117,1,0,0,0,188,1119,1,0,0,0,190,1141,1,0,0,0,192,1143,
1,0,0,0,194,1154,1,0,0,0,196,1183,1,0,0,0,198,1219,1,0,0,0,200,1221,1,0,
0,0,202,1225,1,0,0,0,204,1254,1,0,0,0,206,1256,1,0,0,0,208,1278,1,0,0,0,
210,1280,1,0,0,0,212,1286,1,0,0,0,214,1301,1,0,0,0,216,1360,1,0,0,0,218,
1362,1,0,0,0,220,1374,1,0,0,0,222,1397,1,0,0,0,224,1401,1,0,0,0,226,1404,
1,0,0,0,228,1413,1,0,0,0,230,1418,1,0,0,0,232,1420,1,0,0,0,234,1427,1,0,
0,0,236,1430,1,0,0,0,238,244,5,44,0,0,239,244,3,28,14,0,240,241,3,78,39,
0,241,242,5,44,0,0,242,244,1,0,0,0,243,238,1,0,0,0,243,239,1,0,0,0,243,240,
1,0,0,0,244,1,1,0,0,0,245,248,5,44,0,0,246,248,3,26,13,0,247,245,1,0,0,0,
247,246,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,252,
1,0,0,0,251,249,1,0,0,0,252,253,5,0,0,1,253,3,1,0,0,0,254,258,3,214,107,
0,255,257,5,44,0,0,256,255,1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,
1,0,0,0,259,261,1,0,0,0,260,258,1,0,0,0,261,262,5,0,0,1,262,5,1,0,0,0,263,
264,5,86,0,0,264,270,3,70,35,0,265,267,5,57,0,0,266,268,3,220,110,0,267,
266,1,0,0,0,267,268,1,0,0,0,268,269,1,0,0,0,269,271,5,58,0,0,270,265,1,0,
0,0,270,271,1,0,0,0,271,272,1,0,0,0,272,273,5,44,0,0,273,7,1,0,0,0,274,276,
3,6,3,0,275,274,1,0,0,0,276,277,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,
278,9,1,0,0,0,279,283,3,8,4,0,280,284,3,218,109,0,281,284,3,14,7,0,282,284,
3,12,6,0,283,280,1,0,0,0,283,281,1,0,0,0,283,282,1,0,0,0,284,11,1,0,0,0,
285,286,5,9,0,0,286,287,3,14,7,0,287,13,1,0,0,0,288,289,5,15,0,0,289,290,
3,200,100,0,290,293,3,16,8,0,291,292,5,87,0,0,292,294,3,174,87,0,293,291,
1,0,0,0,293,294,1,0,0,0,294,295,1,0,0,0,295,296,5,60,0,0,296,297,3,96,48,
0,297,15,1,0,0,0,298,300,5,57,0,0,299,301,3,18,9,0,300,299,1,0,0,0,300,301,
1,0,0,0,301,302,1,0,0,0,302,303,5,58,0,0,303,17,1,0,0,0,304,307,3,20,10,
0,305,306,5,63,0,0,306,308,3,174,87,0,307,305,1,0,0,0,307,308,1,0,0,0,308,
317,1,0,0,0,309,310,5,59,0,0,310,313,3,20,10,0,311,312,5,63,0,0,312,314,
3,174,87,0,313,311,1,0,0,0,313,314,1,0,0,0,314,316,1,0,0,0,315,309,1,0,0,
0,316,319,1,0,0,0,317,315,1,0,0,0,317,318,1,0,0,0,318,353,1,0,0,0,319,317,
1,0,0,0,320,351,5,59,0,0,321,323,5,56,0,0,322,324,3,20,10,0,323,322,1,0,
0,0,323,324,1,0,0,0,324,333,1,0,0,0,325,326,5,59,0,0,326,329,3,20,10,0,327,
328,5,63,0,0,328,330,3,174,87,0,329,327,1,0,0,0,329,330,1,0,0,0,330,332,
1,0,0,0,331,325,1,0,0,0,332,335,1,0,0,0,333,331,1,0,0,0,333,334,1,0,0,0,
334,344,1,0,0,0,335,333,1,0,0,0,336,342,5,59,0,0,337,338,5,62,0,0,338,340,
3,20,10,0,339,341,5,59,0,0,340,339,1,0,0,0,340,341,1,0,0,0,341,343,1,0,0,
0,342,337,1,0,0,0,342,343,1,0,0,0,343,345,1,0,0,0,344,336,1,0,0,0,344,345,
1,0,0,0,345,352,1,0,0,0,346,347,5,62,0,0,347,349,3,20,10,0,348,350,5,59,
0,0,349,348,1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,321,1,0,0,0,351,
346,1,0,0,0,351,352,1,0,0,0,352,354,1,0,0,0,353,320,1,0,0,0,353,354,1,0,
0,0,354,386,1,0,0,0,355,357,5,56,0,0,356,358,3,20,10,0,357,356,1,0,0,0,357,
358,1,0,0,0,358,367,1,0,0,0,359,360,5,59,0,0,360,363,3,20,10,0,361,362,5,
63,0,0,362,364,3,174,87,0,363,361,1,0,0,0,363,364,1,0,0,0,364,366,1,0,0,
0,365,359,1,0,0,0,366,369,1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,378,
1,0,0,0,369,367,1,0,0,0,370,376,5,59,0,0,371,372,5,62,0,0,372,374,3,20,10,
0,373,375,5,59,0,0,374,373,1,0,0,0,374,375,1,0,0,0,375,377,1,0,0,0,376,371,
1,0,0,0,376,377,1,0,0,0,377,379,1,0,0,0,378,370,1,0,0,0,378,379,1,0,0,0,
379,386,1,0,0,0,380,381,5,62,0,0,381,383,3,20,10,0,382,384,5,59,0,0,383,
382,1,0,0,0,383,384,1,0,0,0,384,386,1,0,0,0,385,304,1,0,0,0,385,355,1,0,
0,0,385,380,1,0,0,0,386,19,1,0,0,0,387,390,3,200,100,0,388,389,5,60,0,0,
389,391,3,174,87,0,390,388,1,0,0,0,390,391,1,0,0,0,391,21,1,0,0,0,392,395,
3,24,12,0,393,394,5,63,0,0,394,396,3,174,87,0,395,393,1,0,0,0,395,396,1,
0,0,0,396,405,1,0,0,0,397,398,5,59,0,0,398,401,3,24,12,0,399,400,5,63,0,
0,400,402,3,174,87,0,401,399,1,0,0,0,401,402,1,0,0,0,402,404,1,0,0,0,403,
397,1,0,0,0,404,407,1,0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,441,1,0,
0,0,407,405,1,0,0,0,408,439,5,59,0,0,409,411,5,56,0,0,410,412,3,24,12,0,
411,410,1,0,0,0,411,412,1,0,0,0,412,421,1,0,0,0,413,414,5,59,0,0,414,417,
3,24,12,0,415,416,5,63,0,0,416,418,3,174,87,0,417,415,1,0,0,0,417,418,1,
0,0,0,418,420,1,0,0,0,419,413,1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,
422,1,0,0,0,422,432,1,0,0,0,423,421,1,0,0,0,424,430,5,59,0,0,425,426,5,62,
0,0,426,428,3,24,12,0,427,429,5,59,0,0,428,427,1,0,0,0,428,429,1,0,0,0,429,
431,1,0,0,0,430,425,1,0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,424,1,0,
0,0,432,433,1,0,0,0,433,440,1,0,0,0,434,435,5,62,0,0,435,437,3,24,12,0,436,
438,5,59,0,0,437,436,1,0,0,0,437,438,1,0,0,0,438,440,1,0,0,0,439,409,1,0,
0,0,439,434,1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,0,441,408,1,0,0,0,441,
442,1,0,0,0,442,474,1,0,0,0,443,445,5,56,0,0,444,446,3,24,12,0,445,444,1,
0,0,0,445,446,1,0,0,0,446,455,1,0,0,0,447,448,5,59,0,0,448,451,3,24,12,0,
449,450,5,63,0,0,450,452,3,174,87,0,451,449,1,0,0,0,451,452,1,0,0,0,452,
454,1,0,0,0,453,447,1,0,0,0,454,457,1,0,0,0,455,453,1,0,0,0,455,456,1,0,
0,0,456,466,1,0,0,0,457,455,1,0,0,0,458,464,5,59,0,0,459,460,5,62,0,0,460,
462,3,24,12,0,461,463,5,59,0,0,462,461,1,0,0,0,462,463,1,0,0,0,463,465,1,
0,0,0,464,459,1,0,0,0,464,465,1,0,0,0,465,467,1,0,0,0,466,458,1,0,0,0,466,
467,1,0,0,0,467,474,1,0,0,0,468,469,5,62,0,0,469,471,3,24,12,0,470,472,5,
59,0,0,471,470,1,0,0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,392,1,0,0,0,473,
443,1,0,0,0,473,468,1,0,0,0,474,23,1,0,0,0,475,476,3,200,100,0,476,25,1,
0,0,0,477,480,3,28,14,0,478,480,3,78,39,0,479,477,1,0,0,0,479,478,1,0,0,
0,480,27,1,0,0,0,481,486,3,30,15,0,482,483,5,61,0,0,483,485,3,30,15,0,484,
482,1,0,0,0,485,488,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,490,1,0,
0,0,488,486,1,0,0,0,489,491,5,61,0,0,490,489,1,0,0,0,490,491,1,0,0,0,491,
492,1,0,0,0,492,493,5,44,0,0,493,29,1,0,0,0,494,503,3,32,16,0,495,503,3,
40,20,0,496,503,3,42,21,0,497,503,3,44,22,0,498,503,3,56,28,0,499,503,3,
72,36,0,500,503,3,74,37,0,501,503,3,76,38,0,502,494,1,0,0,0,502,495,1,0,
0,0,502,496,1,0,0,0,502,497,1,0,0,0,502,498,1,0,0,0,502,499,1,0,0,0,502,
500,1,0,0,0,502,501,1,0,0,0,503,31,1,0,0,0,504,521,3,36,18,0,505,522,3,34,
17,0,506,509,3,38,19,0,507,510,3,232,116,0,508,510,3,214,107,0,509,507,1,
0,0,0,509,508,1,0,0,0,510,522,1,0,0,0,511,514,5,63,0,0,512,515,3,232,116,
0,513,515,3,36,18,0,514,512,1,0,0,0,514,513,1,0,0,0,515,517,1,0,0,0,516,
511,1,0,0,0,517,520,1,0,0,0,518,516,1,0,0,0,518,519,1,0,0,0,519,522,1,0,
0,0,520,518,1,0,0,0,521,505,1,0,0,0,521,506,1,0,0,0,521,518,1,0,0,0,522,
33,1,0,0,0,523,524,5,60,0,0,524,527,3,174,87,0,525,526,5,63,0,0,526,528,
3,174,87,0,527,525,1,0,0,0,527,528,1,0,0,0,528,35,1,0,0,0,529,532,3,174,
87,0,530,532,3,192,96,0,531,529,1,0,0,0,531,530,1,0,0,0,532,540,1,0,0,0,
533,536,5,59,0,0,534,537,3,174,87,0,535,537,3,192,96,0,536,534,1,0,0,0,536,
535,1,0,0,0,537,539,1,0,0,0,538,533,1,0,0,0,539,542,1,0,0,0,540,538,1,0,
0,0,540,541,1,0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,543,545,5,59,0,0,544,
543,1,0,0,0,544,545,1,0,0,0,545,37,1,0,0,0,546,547,7,0,0,0,547,39,1,0,0,
0,548,549,5,16,0,0,549,550,3,212,106,0,550,41,1,0,0,0,551,552,5,35,0,0,552,
43,1,0,0,0,553,559,3,46,23,0,554,559,3,48,24,0,555,559,3,50,25,0,556,559,
3,54,27,0,557,559,3,52,26,0,558,553,1,0,0,0,558,554,1,0,0,0,558,555,1,0,
0,0,558,556,1,0,0,0,558,557,1,0,0,0,559,45,1,0,0,0,560,561,5,11,0,0,561,
47,1,0,0,0,562,563,5,14,0,0,563,49,1,0,0,0,564,566,5,37,0,0,565,567,3,214,
107,0,566,565,1,0,0,0,566,567,1,0,0,0,567,51,1,0,0,0,568,569,3,232,116,0,
569,53,1,0,0,0,570,576,5,36,0,0,571,574,3,174,87,0,572,573,5,23,0,0,573,
575,3,174,87,0,574,572,1,0,0,0,574,575,1,0,0,0,575,577,1,0,0,0,576,571,1,
0,0,0,576,577,1,0,0,0,577,55,1,0,0,0,578,581,3,58,29,0,579,581,3,60,30,0,
580,578,1,0,0,0,580,579,1,0,0,0,581,57,1,0,0,0,582,583,5,26,0,0,583,584,
3,68,34,0,584,59,1,0,0,0,585,598,5,23,0,0,586,588,7,1,0,0,587,586,1,0,0,
0,588,591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,592,1,0,0,0,591,589,
1,0,0,0,592,599,3,70,35,0,593,595,7,1,0,0,594,593,1,0,0,0,595,596,1,0,0,
0,596,594,1,0,0,0,596,597,1,0,0,0,597,599,1,0,0,0,598,589,1,0,0,0,598,594,
1,0,0,0,599,600,1,0,0,0,600,607,5,26,0,0,601,608,5,56,0,0,602,603,5,57,0,
0,603,604,3,66,33,0,604,605,5,58,0,0,605,608,1,0,0,0,606,608,3,66,33,0,607,
601,1,0,0,0,607,602,1,0,0,0,607,606,1,0,0,0,608,61,1,0,0,0,609,612,3,200,
100,0,610,611,5,7,0,0,611,613,3,200,100,0,612,610,1,0,0,0,612,613,1,0,0,
0,613,63,1,0,0,0,614,617,3,70,35,0,615,616,5,7,0,0,616,618,3,200,100,0,617,
615,1,0,0,0,617,618,1,0,0,0,618,65,1,0,0,0,619,624,3,62,31,0,620,621,5,59,
0,0,621,623,3,62,31,0,622,620,1,0,0,0,623,626,1,0,0,0,624,622,1,0,0,0,624,
625,1,0,0,0,625,628,1,0,0,0,626,624,1,0,0,0,627,629,5,59,0,0,628,627,1,0,
0,0,628,629,1,0,0,0,629,67,1,0,0,0,630,635,3,64,32,0,631,632,5,59,0,0,632,
634,3,64,32,0,633,631,1,0,0,0,634,637,1,0,0,0,635,633,1,0,0,0,635,636,1,
0,0,0,636,69,1,0,0,0,637,635,1,0,0,0,638,643,3,200,100,0,639,640,5,54,0,
0,640,642,3,200,100,0,641,639,1,0,0,0,642,645,1,0,0,0,643,641,1,0,0,0,643,
644,1,0,0,0,644,71,1,0,0,0,645,643,1,0,0,0,646,647,5,24,0,0,647,652,3,200,
100,0,648,649,5,59,0,0,649,651,3,200,100,0,650,648,1,0,0,0,651,654,1,0,0,
0,652,650,1,0,0,0,652,653,1,0,0,0,653,73,1,0,0,0,654,652,1,0,0,0,655,656,
5,32,0,0,656,661,3,200,100,0,657,658,5,59,0,0,658,660,3,200,100,0,659,657,
1,0,0,0,660,663,1,0,0,0,661,659,1,0,0,0,661,662,1,0,0,0,662,75,1,0,0,0,663,
661,1,0,0,0,664,665,5,8,0,0,665,668,3,174,87,0,666,667,5,59,0,0,667,669,
3,174,87,0,668,666,1,0,0,0,668,669,1,0,0,0,669,77,1,0,0,0,670,681,3,82,41,
0,671,681,3,84,42,0,672,681,3,86,43,0,673,681,3,88,44,0,674,681,3,90,45,
0,675,681,3,14,7,0,676,681,3,218,109,0,677,681,3,10,5,0,678,681,3,80,40,
0,679,681,3,98,49,0,680,670,1,0,0,0,680,671,1,0,0,0,680,672,1,0,0,0,680,
673,1,0,0,0,680,674,1,0,0,0,680,675,1,0,0,0,680,676,1,0,0,0,680,677,1,0,
0,0,680,678,1,0,0,0,680,679,1,0,0,0,681,79,1,0,0,0,682,686,5,9,0,0,683,687,
3,14,7,0,684,687,3,90,45,0,685,687,3,86,43,0,686,683,1,0,0,0,686,684,1,0,
0,0,686,685,1,0,0,0,687,81,1,0,0,0,688,689,5,25,0,0,689,690,3,174,87,0,690,
691,5,60,0,0,691,699,3,96,48,0,692,693,5,17,0,0,693,694,3,174,87,0,694,695,
5,60,0,0,695,696,3,96,48,0,696,698,1,0,0,0,697,692,1,0,0,0,698,701,1,0,0,
0,699,697,1,0,0,0,699,700,1,0,0,0,700,705,1,0,0,0,701,699,1,0,0,0,702,703,
5,18,0,0,703,704,5,60,0,0,704,706,3,96,48,0,705,702,1,0,0,0,705,706,1,0,
0,0,706,83,1,0,0,0,707,708,5,41,0,0,708,709,3,174,87,0,709,710,5,60,0,0,
710,714,3,96,48,0,711,712,5,18,0,0,712,713,5,60,0,0,713,715,3,96,48,0,714,
711,1,0,0,0,714,715,1,0,0,0,715,85,1,0,0,0,716,717,5,22,0,0,717,718,3,212,
106,0,718,719,5,27,0,0,719,720,3,214,107,0,720,721,5,60,0,0,721,725,3,96,
48,0,722,723,5,18,0,0,723,724,5,60,0,0,724,726,3,96,48,0,725,722,1,0,0,0,
725,726,1,0,0,0,726,87,1,0,0,0,727,728,5,39,0,0,728,729,5,60,0,0,729,751,
3,96,48,0,730,731,3,94,47,0,731,732,5,60,0,0,732,733,3,96,48,0,733,735,1,
0,0,0,734,730,1,0,0,0,735,736,1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,737,
741,1,0,0,0,738,739,5,18,0,0,739,740,5,60,0,0,740,742,3,96,48,0,741,738,
1,0,0,0,741,742,1,0,0,0,742,746,1,0,0,0,743,744,5,21,0,0,744,745,5,60,0,
0,745,747,3,96,48,0,746,743,1,0,0,0,746,747,1,0,0,0,747,752,1,0,0,0,748,
749,5,21,0,0,749,750,5,60,0,0,750,752,3,96,48,0,751,734,1,0,0,0,751,748,
1,0,0,0,752,89,1,0,0,0,753,754,5,42,0,0,754,759,3,92,46,0,755,756,5,59,0,
0,756,758,3,92,46,0,757,755,1,0,0,0,758,761,1,0,0,0,759,757,1,0,0,0,759,
760,1,0,0,0,760,762,1,0,0,0,761,759,1,0,0,0,762,763,5,60,0,0,763,764,3,96,
48,0,764,91,1,0,0,0,765,768,3,174,87,0,766,767,5,7,0,0,767,769,3,194,97,
0,768,766,1,0,0,0,768,769,1,0,0,0,769,93,1,0,0,0,770,776,5,19,0,0,771,774,
3,174,87,0,772,773,5,7,0,0,773,775,3,200,100,0,774,772,1,0,0,0,774,775,1,
0,0,0,775,777,1,0,0,0,776,771,1,0,0,0,776,777,1,0,0,0,777,95,1,0,0,0,778,
789,3,28,14,0,779,780,5,44,0,0,780,782,5,1,0,0,781,783,3,26,13,0,782,781,
1,0,0,0,783,784,1,0,0,0,784,782,1,0,0,0,784,785,1,0,0,0,785,786,1,0,0,0,
786,787,5,2,0,0,787,789,1,0,0,0,788,778,1,0,0,0,788,779,1,0,0,0,789,97,1,
0,0,0,790,791,5,30,0,0,791,792,3,100,50,0,792,793,5,60,0,0,793,794,5,44,
0,0,794,796,5,1,0,0,795,797,3,106,53,0,796,795,1,0,0,0,797,798,1,0,0,0,798,
796,1,0,0,0,798,799,1,0,0,0,799,800,1,0,0,0,800,801,5,2,0,0,801,99,1,0,0,
0,802,803,3,104,52,0,803,805,5,59,0,0,804,806,3,102,51,0,805,804,1,0,0,0,
805,806,1,0,0,0,806,809,1,0,0,0,807,809,3,174,87,0,808,802,1,0,0,0,808,807,
1,0,0,0,809,101,1,0,0,0,810,812,5,59,0,0,811,813,3,104,52,0,812,811,1,0,
0,0,813,814,1,0,0,0,814,812,1,0,0,0,814,815,1,0,0,0,815,817,1,0,0,0,816,
818,5,59,0,0,817,816,1,0,0,0,817,818,1,0,0,0,818,103,1,0,0,0,819,820,5,56,
0,0,820,823,3,194,97,0,821,823,3,174,87,0,822,819,1,0,0,0,822,821,1,0,0,
0,823,105,1,0,0,0,824,825,5,12,0,0,825,827,3,110,55,0,826,828,3,108,54,0,
827,826,1,0,0,0,827,828,1,0,0,0,828,829,1,0,0,0,829,830,5,60,0,0,830,831,
3,96,48,0,831,107,1,0,0,0,832,833,5,25,0,0,833,834,3,174,87,0,834,109,1,
0,0,0,835,838,3,150,75,0,836,838,3,112,56,0,837,835,1,0,0,0,837,836,1,0,
0,0,838,111,1,0,0,0,839,842,3,114,57,0,840,842,3,116,58,0,841,839,1,0,0,
0,841,840,1,0,0,0,842,113,1,0,0,0,843,844,3,116,58,0,844,845,5,7,0,0,845,
846,3,136,68,0,846,115,1,0,0,0,847,852,3,118,59,0,848,849,5,66,0,0,849,851,
3,118,59,0,850,848,1,0,0,0,851,854,1,0,0,0,852,850,1,0,0,0,852,853,1,0,0,
0,853,117,1,0,0,0,854,852,1,0,0,0,855,864,3,120,60,0,856,864,3,134,67,0,
857,864,3,138,69,0,858,864,3,140,70,0,859,864,3,146,73,0,860,864,3,148,74,
0,861,864,3,158,79,0,862,864,3,166,83,0,863,855,1,0,0,0,863,856,1,0,0,0,
863,857,1,0,0,0,863,858,1,0,0,0,863,859,1,0,0,0,863,860,1,0,0,0,863,861,
1,0,0,0,863,862,1,0,0,0,864,119,1,0,0,0,865,866,3,126,63,0,866,867,4,60,
0,0,867,874,1,0,0,0,868,874,3,124,62,0,869,874,3,236,118,0,870,874,5,31,
0,0,871,874,5,38,0,0,872,874,5,20,0,0,873,865,1,0,0,0,873,868,1,0,0,0,873,
869,1,0,0,0,873,870,1,0,0,0,873,871,1,0,0,0,873,872,1,0,0,0,874,121,1,0,
0,0,875,876,3,126,63,0,876,877,4,61,1,0,877,884,1,0,0,0,878,884,3,124,62,
0,879,884,3,236,118,0,880,884,5,31,0,0,881,884,5,38,0,0,882,884,5,20,0,0,
883,875,1,0,0,0,883,878,1,0,0,0,883,879,1,0,0,0,883,880,1,0,0,0,883,881,
1,0,0,0,883,882,1,0,0,0,884,123,1,0,0,0,885,886,3,128,64,0,886,887,5,71,
0,0,887,888,3,132,66,0,888,894,1,0,0,0,889,890,3,128,64,0,890,891,5,72,0,
0,891,892,3,132,66,0,892,894,1,0,0,0,893,885,1,0,0,0,893,889,1,0,0,0,894,
125,1,0,0,0,895,899,5,4,0,0,896,897,5,72,0,0,897,899,5,4,0,0,898,895,1,0,
0,0,898,896,1,0,0,0,899,127,1,0,0,0,900,904,3,130,65,0,901,902,5,72,0,0,
902,904,3,130,65,0,903,900,1,0,0,0,903,901,1,0,0,0,904,129,1,0,0,0,905,906,
5,4,0,0,906,131,1,0,0,0,907,908,5,4,0,0,908,133,1,0,0,0,909,910,3,136,68,
0,910,135,1,0,0,0,911,912,3,200,100,0,912,913,4,68,2,0,913,137,1,0,0,0,914,
915,5,40,0,0,915,139,1,0,0,0,916,917,3,142,71,0,917,918,4,70,3,0,918,141,
1,0,0,0,919,922,3,200,100,0,920,921,5,54,0,0,921,923,3,200,100,0,922,920,
1,0,0,0,923,924,1,0,0,0,924,922,1,0,0,0,924,925,1,0,0,0,925,143,1,0,0,0,
926,929,3,142,71,0,927,929,3,200,100,0,928,926,1,0,0,0,928,927,1,0,0,0,929,
145,1,0,0,0,930,931,5,57,0,0,931,932,3,112,56,0,932,933,5,58,0,0,933,147,
1,0,0,0,934,936,5,64,0,0,935,937,3,152,76,0,936,935,1,0,0,0,936,937,1,0,
0,0,937,938,1,0,0,0,938,945,5,65,0,0,939,941,5,57,0,0,940,942,3,150,75,0,
941,940,1,0,0,0,941,942,1,0,0,0,942,943,1,0,0,0,943,945,5,58,0,0,944,934,
1,0,0,0,944,939,1,0,0,0,945,149,1,0,0,0,946,947,3,154,77,0,947,949,5,59,
0,0,948,950,3,152,76,0,949,948,1,0,0,0,949,950,1,0,0,0,950,151,1,0,0,0,951,
956,3,154,77,0,952,953,5,59,0,0,953,955,3,154,77,0,954,952,1,0,0,0,955,958,
1,0,0,0,956,954,1,0,0,0,956,957,1,0,0,0,957,960,1,0,0,0,958,956,1,0,0,0,
959,961,5,59,0,0,960,959,1,0,0,0,960,961,1,0,0,0,961,153,1,0,0,0,962,965,
3,156,78,0,963,965,3,112,56,0,964,962,1,0,0,0,964,963,1,0,0,0,965,155,1,
0,0,0,966,967,5,56,0,0,967,971,3,136,68,0,968,969,5,56,0,0,969,971,3,138,
69,0,970,966,1,0,0,0,970,968,1,0,0,0,971,157,1,0,0,0,972,973,5,77,0,0,973,
998,5,78,0,0,974,975,5,77,0,0,975,977,3,164,82,0,976,978,5,59,0,0,977,976,
1,0,0,0,977,978,1,0,0,0,978,979,1,0,0,0,979,980,5,78,0,0,980,998,1,0,0,0,
981,982,5,77,0,0,982,983,3,160,80,0,983,984,5,59,0,0,984,986,3,164,82,0,
985,987,5,59,0,0,986,985,1,0,0,0,986,987,1,0,0,0,987,988,1,0,0,0,988,989,
5,78,0,0,989,998,1,0,0,0,990,991,5,77,0,0,991,993,3,160,80,0,992,994,5,59,
0,0,993,992,1,0,0,0,993,994,1,0,0,0,994,995,1,0,0,0,995,996,5,78,0,0,996,
998,1,0,0,0,997,972,1,0,0,0,997,974,1,0,0,0,997,981,1,0,0,0,997,990,1,0,
0,0,998,159,1,0,0,0,999,1004,3,162,81,0,1000,1001,5,59,0,0,1001,1003,3,162,
81,0,1002,1000,1,0,0,0,1003,1006,1,0,0,0,1004,1002,1,0,0,0,1004,1005,1,0,
0,0,1005,161,1,0,0,0,1006,1004,1,0,0,0,1007,1010,3,122,61,0,1008,1010,3,
142,71,0,1009,1007,1,0,0,0,1009,1008,1,0,0,0,1010,1011,1,0,0,0,1011,1012,
5,60,0,0,1012,1013,3,112,56,0,1013,163,1,0,0,0,1014,1015,5,62,0,0,1015,1016,
3,136,68,0,1016,165,1,0,0,0,1017,1018,3,144,72,0,1018,1019,5,57,0,0,1019,
1020,5,58,0,0,1020,1048,1,0,0,0,1021,1022,3,144,72,0,1022,1023,5,57,0,0,
1023,1025,3,168,84,0,1024,1026,5,59,0,0,1025,1024,1,0,0,0,1025,1026,1,0,
0,0,1026,1027,1,0,0,0,1027,1028,5,58,0,0,1028,1048,1,0,0,0,1029,1030,3,144,
72,0,1030,1031,5,57,0,0,1031,1033,3,170,85,0,1032,1034,5,59,0,0,1033,1032,
1,0,0,0,1033,1034,1,0,0,0,1034,1035,1,0,0,0,1035,1036,5,58,0,0,1036,1048,
1,0,0,0,1037,1038,3,144,72,0,1038,1039,5,57,0,0,1039,1040,3,168,84,0,1040,
1041,5,59,0,0,1041,1043,3,170,85,0,1042,1044,5,59,0,0,1043,1042,1,0,0,0,
1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,1046,5,58,0,0,1046,1048,1,0,0,0,
1047,1017,1,0,0,0,1047,1021,1,0,0,0,1047,1029,1,0,0,0,1047,1037,1,0,0,0,
1048,167,1,0,0,0,1049,1054,3,112,56,0,1050,1051,5,59,0,0,1051,1053,3,112,
56,0,1052,1050,1,0,0,0,1053,1056,1,0,0,0,1054,1052,1,0,0,0,1054,1055,1,0,
0,0,1055,169,1,0,0,0,1056,1054,1,0,0,0,1057,1062,3,172,86,0,1058,1059,5,
59,0,0,1059,1061,3,172,86,0,1060,1058,1,0,0,0,1061,1064,1,0,0,0,1062,1060,
1,0,0,0,1062,1063,1,0,0,0,1063,171,1,0,0,0,1064,1062,1,0,0,0,1065,1066,3,
200,100,0,1066,1067,5,63,0,0,1067,1068,3,112,56,0,1068,173,1,0,0,0,1069,
1075,3,182,91,0,1070,1071,5,25,0,0,1071,1072,3,182,91,0,1072,1073,5,18,0,
0,1073,1074,3,174,87,0,1074,1076,1,0,0,0,1075,1070,1,0,0,0,1075,1076,1,0,
0,0,1076,1079,1,0,0,0,1077,1079,3,178,89,0,1078,1069,1,0,0,0,1078,1077,1,
0,0,0,1079,175,1,0,0,0,1080,1083,3,182,91,0,1081,1083,3,180,90,0,1082,1080,
1,0,0,0,1082,1081,1,0,0,0,1083,177,1,0,0,0,1084,1086,5,29,0,0,1085,1087,
3,22,11,0,1086,1085,1,0,0,0,1086,1087,1,0,0,0,1087,1088,1,0,0,0,1088,1089,
5,60,0,0,1089,1090,3,174,87,0,1090,179,1,0,0,0,1091,1093,5,29,0,0,1092,1094,
3,22,11,0,1093,1092,1,0,0,0,1093,1094,1,0,0,0,1094,1095,1,0,0,0,1095,1096,
5,60,0,0,1096,1097,3,176,88,0,1097,181,1,0,0,0,1098,1103,3,184,92,0,1099,
1100,5,34,0,0,1100,1102,3,184,92,0,1101,1099,1,0,0,0,1102,1105,1,0,0,0,1103,
1101,1,0,0,0,1103,1104,1,0,0,0,1104,183,1,0,0,0,1105,1103,1,0,0,0,1106,1111,
3,186,93,0,1107,1108,5,6,0,0,1108,1110,3,186,93,0,1109,1107,1,0,0,0,1110,
1113,1,0,0,0,1111,1109,1,0,0,0,1111,1112,1,0,0,0,1112,185,1,0,0,0,1113,1111,
1,0,0,0,1114,1115,5,33,0,0,1115,1118,3,186,93,0,1116,1118,3,188,94,0,1117,
1114,1,0,0,0,1117,1116,1,0,0,0,1118,187,1,0,0,0,1119,1125,3,194,97,0,1120,
1121,3,190,95,0,1121,1122,3,194,97,0,1122,1124,1,0,0,0,1123,1120,1,0,0,0,
1124,1127,1,0,0,0,1125,1123,1,0,0,0,1125,1126,1,0,0,0,1126,189,1,0,0,0,1127,
1125,1,0,0,0,1128,1142,5,79,0,0,1129,1142,5,80,0,0,1130,1142,5,81,0,0,1131,
1142,5,82,0,0,1132,1142,5,83,0,0,1133,1142,5,84,0,0,1134,1142,5,85,0,0,1135,
1142,5,27,0,0,1136,1137,5,33,0,0,1137,1142,5,27,0,0,1138,1142,5,28,0,0,1139,
1140,5,28,0,0,1140,1142,5,33,0,0,1141,1128,1,0,0,0,1141,1129,1,0,0,0,1141,
1130,1,0,0,0,1141,1131,1,0,0,0,1141,1132,1,0,0,0,1141,1133,1,0,0,0,1141,
1134,1,0,0,0,1141,1135,1,0,0,0,1141,1136,1,0,0,0,1141,1138,1,0,0,0,1141,
1139,1,0,0,0,1142,191,1,0,0,0,1143,1144,5,56,0,0,1144,1145,3,194,97,0,1145,
193,1,0,0,0,1146,1147,6,97,-1,0,1147,1155,3,196,98,0,1148,1150,7,2,0,0,1149,
1148,1,0,0,0,1150,1151,1,0,0,0,1151,1149,1,0,0,0,1151,1152,1,0,0,0,1152,
1153,1,0,0,0,1153,1155,3,194,97,7,1154,1146,1,0,0,0,1154,1149,1,0,0,0,1155,
1179,1,0,0,0,1156,1157,10,8,0,0,1157,1158,5,62,0,0,1158,1178,3,194,97,9,
1159,1160,10,6,0,0,1160,1161,7,3,0,0,1161,1178,3,194,97,7,1162,1163,10,5,
0,0,1163,1164,7,4,0,0,1164,1178,3,194,97,6,1165,1166,10,4,0,0,1166,1167,
7,5,0,0,1167,1178,3,194,97,5,1168,1169,10,3,0,0,1169,1170,5,68,0,0,1170,
1178,3,194,97,4,1171,1172,10,2,0,0,1172,1173,5,67,0,0,1173,1178,3,194,97,
3,1174,1175,10,1,0,0,1175,1176,5,66,0,0,1176,1178,3,194,97,2,1177,1156,1,
0,0,0,1177,1159,1,0,0,0,1177,1162,1,0,0,0,1177,1165,1,0,0,0,1177,1168,1,
0,0,0,1177,1171,1,0,0,0,1177,1174,1,0,0,0,1178,1181,1,0,0,0,1179,1177,1,
0,0,0,1179,1180,1,0,0,0,1180,195,1,0,0,0,1181,1179,1,0,0,0,1182,1184,5,10,
0,0,1183,1182,1,0,0,0,1183,1184,1,0,0,0,1184,1185,1,0,0,0,1185,1189,3,198,
99,0,1186,1188,3,204,102,0,1187,1186,1,0,0,0,1188,1191,1,0,0,0,1189,1187,
1,0,0,0,1189,1190,1,0,0,0,1190,197,1,0,0,0,1191,1189,1,0,0,0,1192,1195,5,
57,0,0,1193,1196,3,232,116,0,1194,1196,3,202,101,0,1195,1193,1,0,0,0,1195,
1194,1,0,0,0,1195,1196,1,0,0,0,1196,1197,1,0,0,0,1197,1220,5,58,0,0,1198,
1200,5,64,0,0,1199,1201,3,202,101,0,1200,1199,1,0,0,0,1200,1201,1,0,0,0,
1201,1202,1,0,0,0,1202,1220,5,65,0,0,1203,1205,5,77,0,0,1204,1206,3,216,
108,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,1207,1,0,0,0,1207,1220,5,
78,0,0,1208,1220,3,200,100,0,1209,1220,5,4,0,0,1210,1212,5,3,0,0,1211,1210,
1,0,0,0,1212,1213,1,0,0,0,1213,1211,1,0,0,0,1213,1214,1,0,0,0,1214,1220,
1,0,0,0,1215,1220,5,55,0,0,1216,1220,5,31,0,0,1217,1220,5,38,0,0,1218,1220,
5,20,0,0,1219,1192,1,0,0,0,1219,1198,1,0,0,0,1219,1203,1,0,0,0,1219,1208,
1,0,0,0,1219,1209,1,0,0,0,1219,1211,1,0,0,0,1219,1215,1,0,0,0,1219,1216,
1,0,0,0,1219,1217,1,0,0,0,1219,1218,1,0,0,0,1220,199,1,0,0,0,1221,1222,7,
6,0,0,1222,201,1,0,0,0,1223,1226,3,174,87,0,1224,1226,3,192,96,0,1225,1223,
1,0,0,0,1225,1224,1,0,0,0,1226,1241,1,0,0,0,1227,1242,3,226,113,0,1228,1231,
5,59,0,0,1229,1232,3,174,87,0,1230,1232,3,192,96,0,1231,1229,1,0,0,0,1231,
1230,1,0,0,0,1232,1234,1,0,0,0,1233,1228,1,0,0,0,1234,1237,1,0,0,0,1235,
1233,1,0,0,0,1235,1236,1,0,0,0,1236,1239,1,0,0,0,1237,1235,1,0,0,0,1238,
1240,5,59,0,0,1239,1238,1,0,0,0,1239,1240,1,0,0,0,1240,1242,1,0,0,0,1241,
1227,1,0,0,0,1241,1235,1,0,0,0,1242,203,1,0,0,0,1243,1245,5,57,0,0,1244,
1246,3,220,110,0,1245,1244,1,0,0,0,1245,1246,1,0,0,0,1246,1247,1,0,0,0,1247,
1255,5,58,0,0,1248,1249,5,64,0,0,1249,1250,3,206,103,0,1250,1251,5,65,0,
0,1251,1255,1,0,0,0,1252,1253,5,54,0,0,1253,1255,3,200,100,0,1254,1243,1,
0,0,0,1254,1248,1,0,0,0,1254,1252,1,0,0,0,1255,205,1,0,0,0,1256,1261,3,208,
104,0,1257,1258,5,59,0,0,1258,1260,3,208,104,0,1259,1257,1,0,0,0,1260,1263,
1,0,0,0,1261,1259,1,0,0,0,1261,1262,1,0,0,0,1262,1265,1,0,0,0,1263,1261,
1,0,0,0,1264,1266,5,59,0,0,1265,1264,1,0,0,0,1265,1266,1,0,0,0,1266,207,
1,0,0,0,1267,1279,3,174,87,0,1268,1270,3,174,87,0,1269,1268,1,0,0,0,1269,
1270,1,0,0,0,1270,1271,1,0,0,0,1271,1273,5,60,0,0,1272,1274,3,174,87,0,1273,
1272,1,0,0,0,1273,1274,1,0,0,0,1274,1276,1,0,0,0,1275,1277,3,210,105,0,1276,
1275,1,0,0,0,1276,1277,1,0,0,0,1277,1279,1,0,0,0,1278,1267,1,0,0,0,1278,
1269,1,0,0,0,1279,209,1,0,0,0,1280,1282,5,60,0,0,1281,1283,3,174,87,0,1282,
1281,1,0,0,0,1282,1283,1,0,0,0,1283,211,1,0,0,0,1284,1287,3,194,97,0,1285,
1287,3,192,96,0,1286,1284,1,0,0,0,1286,1285,1,0,0,0,1287,1295,1,0,0,0,1288,
1291,5,59,0,0,1289,1292,3,194,97,0,1290,1292,3,192,96,0,1291,1289,1,0,0,
0,1291,1290,1,0,0,0,1292,1294,1,0,0,0,1293,1288,1,0,0,0,1294,1297,1,0,0,
0,1295,1293,1,0,0,0,1295,1296,1,0,0,0,1296,1299,1,0,0,0,1297,1295,1,0,0,
0,1298,1300,5,59,0,0,1299,1298,1,0,0,0,1299,1300,1,0,0,0,1300,213,1,0,0,
0,1301,1306,3,174,87,0,1302,1303,5,59,0,0,1303,1305,3,174,87,0,1304,1302,
1,0,0,0,1305,1308,1,0,0,0,1306,1304,1,0,0,0,1306,1307,1,0,0,0,1307,1310,
1,0,0,0,1308,1306,1,0,0,0,1309,1311,5,59,0,0,1310,1309,1,0,0,0,1310,1311,
1,0,0,0,1311,215,1,0,0,0,1312,1313,3,174,87,0,1313,1314,5,60,0,0,1314,1315,
3,174,87,0,1315,1319,1,0,0,0,1316,1317,5,62,0,0,1317,1319,3,194,97,0,1318,
1312,1,0,0,0,1318,1316,1,0,0,0,1319,1338,1,0,0,0,1320,1339,3,226,113,0,1321,
1328,5,59,0,0,1322,1323,3,174,87,0,1323,1324,5,60,0,0,1324,1325,3,174,87,
0,1325,1329,1,0,0,0,1326,1327,5,62,0,0,1327,1329,3,194,97,0,1328,1322,1,
0,0,0,1328,1326,1,0,0,0,1329,1331,1,0,0,0,1330,1321,1,0,0,0,1331,1334,1,
0,0,0,1332,1330,1,0,0,0,1332,1333,1,0,0,0,1333,1336,1,0,0,0,1334,1332,1,
0,0,0,1335,1337,5,59,0,0,1336,1335,1,0,0,0,1336,1337,1,0,0,0,1337,1339,1,
0,0,0,1338,1320,1,0,0,0,1338,1332,1,0,0,0,1339,1361,1,0,0,0,1340,1343,3,
174,87,0,1341,1343,3,192,96,0,1342,1340,1,0,0,0,1342,1341,1,0,0,0,1343,1358,
1,0,0,0,1344,1359,3,226,113,0,1345,1348,5,59,0,0,1346,1349,3,174,87,0,1347,
1349,3,192,96,0,1348,1346,1,0,0,0,1348,1347,1,0,0,0,1349,1351,1,0,0,0,1350,
1345,1,0,0,0,1351,1354,1,0,0,0,1352,1350,1,0,0,0,1352,1353,1,0,0,0,1353,
1356,1,0,0,0,1354,1352,1,0,0,0,1355,1357,5,59,0,0,1356,1355,1,0,0,0,1356,
1357,1,0,0,0,1357,1359,1,0,0,0,1358,1344,1,0,0,0,1358,1352,1,0,0,0,1359,
1361,1,0,0,0,1360,1318,1,0,0,0,1360,1342,1,0,0,0,1361,217,1,0,0,0,1362,1363,
5,13,0,0,1363,1369,3,200,100,0,1364,1366,5,57,0,0,1365,1367,3,220,110,0,
1366,1365,1,0,0,0,1366,1367,1,0,0,0,1367,1368,1,0,0,0,1368,1370,5,58,0,0,
1369,1364,1,0,0,0,1369,1370,1,0,0,0,1370,1371,1,0,0,0,1371,1372,5,60,0,0,
1372,1373,3,96,48,0,1373,219,1,0,0,0,1374,1379,3,222,111,0,1375,1376,5,59,
0,0,1376,1378,3,222,111,0,1377,1375,1,0,0,0,1378,1381,1,0,0,0,1379,1377,
1,0,0,0,1379,1380,1,0,0,0,1380,1383,1,0,0,0,1381,1379,1,0,0,0,1382,1384,
5,59,0,0,1383,1382,1,0,0,0,1383,1384,1,0,0,0,1384,221,1,0,0,0,1385,1387,
3,174,87,0,1386,1388,3,226,113,0,1387,1386,1,0,0,0,1387,1388,1,0,0,0,1388,
1398,1,0,0,0,1389,1390,3,174,87,0,1390,1391,5,63,0,0,1391,1392,3,174,87,
0,1392,1398,1,0,0,0,1393,1394,5,62,0,0,1394,1398,3,174,87,0,1395,1396,5,
56,0,0,1396,1398,3,174,87,0,1397,1385,1,0,0,0,1397,1389,1,0,0,0,1397,1393,
1,0,0,0,1397,1395,1,0,0,0,1398,223,1,0,0,0,1399,1402,3,226,113,0,1400,1402,
3,228,114,0,1401,1399,1,0,0,0,1401,1400,1,0,0,0,1402,225,1,0,0,0,1403,1405,
5,9,0,0,1404,1403,1,0,0,0,1404,1405,1,0,0,0,1405,1406,1,0,0,0,1406,1407,
5,22,0,0,1407,1408,3,212,106,0,1408,1409,5,27,0,0,1409,1411,3,182,91,0,1410,
1412,3,224,112,0,1411,1410,1,0,0,0,1411,1412,1,0,0,0,1412,227,1,0,0,0,1413,
1414,5,25,0,0,1414,1416,3,176,88,0,1415,1417,3,224,112,0,1416,1415,1,0,0,
0,1416,1417,1,0,0,0,1417,229,1,0,0,0,1418,1419,3,200,100,0,1419,231,1,0,
0,0,1420,1422,5,43,0,0,1421,1423,3,234,117,0,1422,1421,1,0,0,0,1422,1423,
1,0,0,0,1423,233,1,0,0,0,1424,1425,5,23,0,0,1425,1428,3,174,87,0,1426,1428,
3,214,107,0,1427,1424,1,0,0,0,1427,1426,1,0,0,0,1428,235,1,0,0,0,1429,1431,
5,3,0,0,1430,1429,1,0,0,0,1431,1432,1,0,0,0,1432,1430,1,0,0,0,1432,1433,
1,0,0,0,1433,237,1,0,0,0,201,243,247,249,258,267,270,277,283,293,300,307,
313,317,323,329,333,340,342,344,349,351,353,357,363,367,374,376,378,383,
385,390,395,401,405,411,417,421,428,430,432,437,439,441,445,451,455,462,
464,466,471,473,479,486,490,502,509,514,518,521,527,531,536,540,544,558,
566,574,576,580,589,596,598,607,612,617,624,628,635,643,652,661,668,680,
686,699,705,714,725,736,741,746,751,759,768,774,776,784,788,798,805,808,
814,817,822,827,837,841,852,863,873,883,893,898,903,924,928,936,941,944,
949,956,960,964,970,977,986,993,997,1004,1009,1025,1033,1043,1047,1054,1062,
1075,1078,1082,1086,1093,1103,1111,1117,1125,1141,1151,1154,1177,1179,1183,
1189,1195,1200,1205,1213,1219,1225,1231,1235,1239,1241,1245,1254,1261,1265,
1269,1273,1276,1278,1282,1286,1291,1295,1299,1306,1310,1318,1328,1332,1336,
1338,1342,1348,1352,1356,1358,1360,1366,1369,1379,1383,1387,1397,1401,1404,
1411,1416,1422,1427,1432];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class Python3Parser extends Python3ParserBase {

    static grammarFileName = "Python3Parser.g4";
    static literalNames = [ null, null, null, null, null, null, "'and'", 
                            "'as'", "'assert'", "'async'", "'await'", "'break'", 
                            "'case'", "'class'", "'continue'", "'def'", 
                            "'del'", "'elif'", "'else'", "'except'", "'False'", 
                            "'finally'", "'for'", "'from'", "'global'", 
                            "'if'", "'import'", "'in'", "'is'", "'lambda'", 
                            "'match'", "'None'", "'nonlocal'", "'not'", 
                            "'or'", "'pass'", "'raise'", "'return'", "'True'", 
                            "'try'", "'_'", "'while'", "'with'", "'yield'", 
                            null, null, null, null, null, null, null, null, 
                            null, null, "'.'", "'...'", "'*'", "'('", "')'", 
                            "','", "':'", "';'", "'**'", "'='", "'['", "']'", 
                            "'|'", "'^'", "'&'", "'<<'", "'>>'", "'+'", 
                            "'-'", "'/'", "'%'", "'//'", "'~'", "'{'", "'}'", 
                            "'<'", "'>'", "'=='", "'>='", "'<='", "'<>'", 
                            "'!='", "'@'", "'->'", "'+='", "'-='", "'*='", 
                            "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", 
                            "'<<='", "'>>='", "'**='", "'//='" ];
    static symbolicNames = [ null, "INDENT", "DEDENT", "STRING", "NUMBER", 
                             "INTEGER", "AND", "AS", "ASSERT", "ASYNC", 
                             "AWAIT", "BREAK", "CASE", "CLASS", "CONTINUE", 
                             "DEF", "DEL", "ELIF", "ELSE", "EXCEPT", "FALSE", 
                             "FINALLY", "FOR", "FROM", "GLOBAL", "IF", "IMPORT", 
                             "IN", "IS", "LAMBDA", "MATCH", "NONE", "NONLOCAL", 
                             "NOT", "OR", "PASS", "RAISE", "RETURN", "TRUE", 
                             "TRY", "UNDERSCORE", "WHILE", "WITH", "YIELD", 
                             "NEWLINE", "NAME", "STRING_LITERAL", "BYTES_LITERAL", 
                             "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", 
                             "BIN_INTEGER", "FLOAT_NUMBER", "IMAG_NUMBER", 
                             "DOT", "ELLIPSIS", "STAR", "OPEN_PAREN", "CLOSE_PAREN", 
                             "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", 
                             "OPEN_BRACK", "CLOSE_BRACK", "OR_OP", "XOR", 
                             "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", "ADD", 
                             "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "OPEN_BRACE", 
                             "CLOSE_BRACE", "LESS_THAN", "GREATER_THAN", 
                             "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", 
                             "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", 
                             "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                             "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", 
                             "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", 
                             "SKIP_", "UNKNOWN_CHAR" ];
    static ruleNames = [ "single_input", "file_input", "eval_input", "decorator", 
                         "decorators", "decorated", "async_funcdef", "funcdef", 
                         "parameters", "typedargslist", "tfpdef", "varargslist", 
                         "vfpdef", "stmt", "simple_stmts", "simple_stmt", 
                         "expr_stmt", "annassign", "testlist_star_expr", 
                         "augassign", "del_stmt", "pass_stmt", "flow_stmt", 
                         "break_stmt", "continue_stmt", "return_stmt", "yield_stmt", 
                         "raise_stmt", "import_stmt", "import_name", "import_from", 
                         "import_as_name", "dotted_as_name", "import_as_names", 
                         "dotted_as_names", "dotted_name", "global_stmt", 
                         "nonlocal_stmt", "assert_stmt", "compound_stmt", 
                         "async_stmt", "if_stmt", "while_stmt", "for_stmt", 
                         "try_stmt", "with_stmt", "with_item", "except_clause", 
                         "block", "match_stmt", "subject_expr", "star_named_expressions", 
                         "star_named_expression", "case_block", "guard", 
                         "patterns", "pattern", "as_pattern", "or_pattern", 
                         "closed_pattern", "literal_pattern", "literal_expr", 
                         "complex_number", "signed_number", "signed_real_number", 
                         "real_number", "imaginary_number", "capture_pattern", 
                         "pattern_capture_target", "wildcard_pattern", "value_pattern", 
                         "attr", "name_or_attr", "group_pattern", "sequence_pattern", 
                         "open_sequence_pattern", "maybe_sequence_pattern", 
                         "maybe_star_pattern", "star_pattern", "mapping_pattern", 
                         "items_pattern", "key_value_pattern", "double_star_pattern", 
                         "class_pattern", "positional_patterns", "keyword_patterns", 
                         "keyword_pattern", "test", "test_nocond", "lambdef", 
                         "lambdef_nocond", "or_test", "and_test", "not_test", 
                         "comparison", "comp_op", "star_expr", "expr", "atom_expr", 
                         "atom", "name", "testlist_comp", "trailer", "subscriptlist", 
                         "subscript_", "sliceop", "exprlist", "testlist", 
                         "dictorsetmaker", "classdef", "arglist", "argument", 
                         "comp_iter", "comp_for", "comp_if", "encoding_decl", 
                         "yield_expr", "yield_arg", "strings" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = Python3Parser.ruleNames;
        this.literalNames = Python3Parser.literalNames;
        this.symbolicNames = Python3Parser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 60:
    	    		return this.literal_pattern_sempred(localctx, predIndex);
    	case 61:
    	    		return this.literal_expr_sempred(localctx, predIndex);
    	case 68:
    	    		return this.pattern_capture_target_sempred(localctx, predIndex);
    	case 70:
    	    		return this.value_pattern_sempred(localctx, predIndex);
    	case 97:
    	    		return this.expr_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    literal_pattern_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return  this.CannotBePlusMinus() ;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    literal_expr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return  this.CannotBePlusMinus() ;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    pattern_capture_target_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return  this.CannotBeDotLpEq() ;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    value_pattern_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return  this.CannotBeDotLpEq() ;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 8);
    		case 5:
    			return this.precpred(this._ctx, 6);
    		case 6:
    			return this.precpred(this._ctx, 5);
    		case 7:
    			return this.precpred(this._ctx, 4);
    		case 8:
    			return this.precpred(this._ctx, 3);
    		case 9:
    			return this.precpred(this._ctx, 2);
    		case 10:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	single_input() {
	    let localctx = new Single_inputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, Python3Parser.RULE_single_input);
	    try {
	        this.state = 243;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 238;
	            this.match(Python3Parser.NEWLINE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 239;
	            this.simple_stmts();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 240;
	            this.compound_stmt();
	            this.state = 241;
	            this.match(Python3Parser.NEWLINE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	file_input() {
	    let localctx = new File_inputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, Python3Parser.RULE_file_input);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 249;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3889295128) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 58736635) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4206977) !== 0)) {
	            this.state = 247;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 44:
	                this.state = 245;
	                this.match(Python3Parser.NEWLINE);
	                break;
	            case 3:
	            case 4:
	            case 8:
	            case 9:
	            case 10:
	            case 11:
	            case 13:
	            case 14:
	            case 15:
	            case 16:
	            case 20:
	            case 22:
	            case 23:
	            case 24:
	            case 25:
	            case 26:
	            case 29:
	            case 30:
	            case 31:
	            case 32:
	            case 33:
	            case 35:
	            case 36:
	            case 37:
	            case 38:
	            case 39:
	            case 40:
	            case 41:
	            case 42:
	            case 43:
	            case 45:
	            case 55:
	            case 56:
	            case 57:
	            case 64:
	            case 71:
	            case 72:
	            case 76:
	            case 77:
	            case 86:
	                this.state = 246;
	                this.stmt();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 251;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 252;
	        this.match(Python3Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eval_input() {
	    let localctx = new Eval_inputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, Python3Parser.RULE_eval_input);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 254;
	        this.testlist();
	        this.state = 258;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===44) {
	            this.state = 255;
	            this.match(Python3Parser.NEWLINE);
	            this.state = 260;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 261;
	        this.match(Python3Parser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decorator() {
	    let localctx = new DecoratorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, Python3Parser.RULE_decorator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 263;
	        this.match(Python3Parser.AT);
	        this.state = 264;
	        this.dotted_name();
	        this.state = 270;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===57) {
	            this.state = 265;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 267;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3759146008) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2713718945) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 99) !== 0)) {
	                this.state = 266;
	                this.arglist();
	            }

	            this.state = 269;
	            this.match(Python3Parser.CLOSE_PAREN);
	        }

	        this.state = 272;
	        this.match(Python3Parser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decorators() {
	    let localctx = new DecoratorsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, Python3Parser.RULE_decorators);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 275; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 274;
	            this.decorator();
	            this.state = 277; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===86);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	decorated() {
	    let localctx = new DecoratedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, Python3Parser.RULE_decorated);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 279;
	        this.decorators();
	        this.state = 283;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 13:
	            this.state = 280;
	            this.classdef();
	            break;
	        case 15:
	            this.state = 281;
	            this.funcdef();
	            break;
	        case 9:
	            this.state = 282;
	            this.async_funcdef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	async_funcdef() {
	    let localctx = new Async_funcdefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, Python3Parser.RULE_async_funcdef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 285;
	        this.match(Python3Parser.ASYNC);
	        this.state = 286;
	        this.funcdef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	funcdef() {
	    let localctx = new FuncdefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, Python3Parser.RULE_funcdef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 288;
	        this.match(Python3Parser.DEF);
	        this.state = 289;
	        this.name();
	        this.state = 290;
	        this.parameters();
	        this.state = 293;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===87) {
	            this.state = 291;
	            this.match(Python3Parser.ARROW);
	            this.state = 292;
	            this.test();
	        }

	        this.state = 295;
	        this.match(Python3Parser.COLON);
	        this.state = 296;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameters() {
	    let localctx = new ParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, Python3Parser.RULE_parameters);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 298;
	        this.match(Python3Parser.OPEN_PAREN);
	        this.state = 300;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===30 || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 4259873) !== 0)) {
	            this.state = 299;
	            this.typedargslist();
	        }

	        this.state = 302;
	        this.match(Python3Parser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typedargslist() {
	    let localctx = new TypedargslistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, Python3Parser.RULE_typedargslist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 385;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	        case 40:
	        case 45:
	            this.state = 304;
	            this.tfpdef();
	            this.state = 307;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===63) {
	                this.state = 305;
	                this.match(Python3Parser.ASSIGN);
	                this.state = 306;
	                this.test();
	            }

	            this.state = 317;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,12,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 309;
	                    this.match(Python3Parser.COMMA);
	                    this.state = 310;
	                    this.tfpdef();
	                    this.state = 313;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===63) {
	                        this.state = 311;
	                        this.match(Python3Parser.ASSIGN);
	                        this.state = 312;
	                        this.test();
	                    }
	             
	                }
	                this.state = 319;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,12,this._ctx);
	            }

	            this.state = 353;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 320;
	                this.match(Python3Parser.COMMA);
	                this.state = 351;
	                this._errHandler.sync(this);
	                switch (this._input.LA(1)) {
	                case 56:
	                	this.state = 321;
	                	this.match(Python3Parser.STAR);
	                	this.state = 323;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 33793) !== 0)) {
	                	    this.state = 322;
	                	    this.tfpdef();
	                	}

	                	this.state = 333;
	                	this._errHandler.sync(this);
	                	var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
	                	while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                	    if(_alt===1) {
	                	        this.state = 325;
	                	        this.match(Python3Parser.COMMA);
	                	        this.state = 326;
	                	        this.tfpdef();
	                	        this.state = 329;
	                	        this._errHandler.sync(this);
	                	        _la = this._input.LA(1);
	                	        if(_la===63) {
	                	            this.state = 327;
	                	            this.match(Python3Parser.ASSIGN);
	                	            this.state = 328;
	                	            this.test();
	                	        }
	                	 
	                	    }
	                	    this.state = 335;
	                	    this._errHandler.sync(this);
	                	    _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
	                	}

	                	this.state = 344;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(_la===59) {
	                	    this.state = 336;
	                	    this.match(Python3Parser.COMMA);
	                	    this.state = 342;
	                	    this._errHandler.sync(this);
	                	    _la = this._input.LA(1);
	                	    if(_la===62) {
	                	        this.state = 337;
	                	        this.match(Python3Parser.POWER);
	                	        this.state = 338;
	                	        this.tfpdef();
	                	        this.state = 340;
	                	        this._errHandler.sync(this);
	                	        _la = this._input.LA(1);
	                	        if(_la===59) {
	                	            this.state = 339;
	                	            this.match(Python3Parser.COMMA);
	                	        }

	                	    }

	                	}

	                	break;
	                case 62:
	                	this.state = 346;
	                	this.match(Python3Parser.POWER);
	                	this.state = 347;
	                	this.tfpdef();
	                	this.state = 349;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(_la===59) {
	                	    this.state = 348;
	                	    this.match(Python3Parser.COMMA);
	                	}

	                	break;
	                case 58:
	                	break;
	                default:
	                	break;
	                }
	            }

	            break;
	        case 56:
	            this.state = 355;
	            this.match(Python3Parser.STAR);
	            this.state = 357;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 33793) !== 0)) {
	                this.state = 356;
	                this.tfpdef();
	            }

	            this.state = 367;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,24,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 359;
	                    this.match(Python3Parser.COMMA);
	                    this.state = 360;
	                    this.tfpdef();
	                    this.state = 363;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===63) {
	                        this.state = 361;
	                        this.match(Python3Parser.ASSIGN);
	                        this.state = 362;
	                        this.test();
	                    }
	             
	                }
	                this.state = 369;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,24,this._ctx);
	            }

	            this.state = 378;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 370;
	                this.match(Python3Parser.COMMA);
	                this.state = 376;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===62) {
	                    this.state = 371;
	                    this.match(Python3Parser.POWER);
	                    this.state = 372;
	                    this.tfpdef();
	                    this.state = 374;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===59) {
	                        this.state = 373;
	                        this.match(Python3Parser.COMMA);
	                    }

	                }

	            }

	            break;
	        case 62:
	            this.state = 380;
	            this.match(Python3Parser.POWER);
	            this.state = 381;
	            this.tfpdef();
	            this.state = 383;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 382;
	                this.match(Python3Parser.COMMA);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tfpdef() {
	    let localctx = new TfpdefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, Python3Parser.RULE_tfpdef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 387;
	        this.name();
	        this.state = 390;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60) {
	            this.state = 388;
	            this.match(Python3Parser.COLON);
	            this.state = 389;
	            this.test();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varargslist() {
	    let localctx = new VarargslistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, Python3Parser.RULE_varargslist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 473;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 30:
	        case 40:
	        case 45:
	            this.state = 392;
	            this.vfpdef();
	            this.state = 395;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===63) {
	                this.state = 393;
	                this.match(Python3Parser.ASSIGN);
	                this.state = 394;
	                this.test();
	            }

	            this.state = 405;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,33,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 397;
	                    this.match(Python3Parser.COMMA);
	                    this.state = 398;
	                    this.vfpdef();
	                    this.state = 401;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===63) {
	                        this.state = 399;
	                        this.match(Python3Parser.ASSIGN);
	                        this.state = 400;
	                        this.test();
	                    }
	             
	                }
	                this.state = 407;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,33,this._ctx);
	            }

	            this.state = 441;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 408;
	                this.match(Python3Parser.COMMA);
	                this.state = 439;
	                this._errHandler.sync(this);
	                switch (this._input.LA(1)) {
	                case 56:
	                	this.state = 409;
	                	this.match(Python3Parser.STAR);
	                	this.state = 411;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 33793) !== 0)) {
	                	    this.state = 410;
	                	    this.vfpdef();
	                	}

	                	this.state = 421;
	                	this._errHandler.sync(this);
	                	var _alt = this._interp.adaptivePredict(this._input,36,this._ctx)
	                	while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                	    if(_alt===1) {
	                	        this.state = 413;
	                	        this.match(Python3Parser.COMMA);
	                	        this.state = 414;
	                	        this.vfpdef();
	                	        this.state = 417;
	                	        this._errHandler.sync(this);
	                	        _la = this._input.LA(1);
	                	        if(_la===63) {
	                	            this.state = 415;
	                	            this.match(Python3Parser.ASSIGN);
	                	            this.state = 416;
	                	            this.test();
	                	        }
	                	 
	                	    }
	                	    this.state = 423;
	                	    this._errHandler.sync(this);
	                	    _alt = this._interp.adaptivePredict(this._input,36,this._ctx);
	                	}

	                	this.state = 432;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(_la===59) {
	                	    this.state = 424;
	                	    this.match(Python3Parser.COMMA);
	                	    this.state = 430;
	                	    this._errHandler.sync(this);
	                	    _la = this._input.LA(1);
	                	    if(_la===62) {
	                	        this.state = 425;
	                	        this.match(Python3Parser.POWER);
	                	        this.state = 426;
	                	        this.vfpdef();
	                	        this.state = 428;
	                	        this._errHandler.sync(this);
	                	        _la = this._input.LA(1);
	                	        if(_la===59) {
	                	            this.state = 427;
	                	            this.match(Python3Parser.COMMA);
	                	        }

	                	    }

	                	}

	                	break;
	                case 62:
	                	this.state = 434;
	                	this.match(Python3Parser.POWER);
	                	this.state = 435;
	                	this.vfpdef();
	                	this.state = 437;
	                	this._errHandler.sync(this);
	                	_la = this._input.LA(1);
	                	if(_la===59) {
	                	    this.state = 436;
	                	    this.match(Python3Parser.COMMA);
	                	}

	                	break;
	                case 60:
	                	break;
	                default:
	                	break;
	                }
	            }

	            break;
	        case 56:
	            this.state = 443;
	            this.match(Python3Parser.STAR);
	            this.state = 445;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 33793) !== 0)) {
	                this.state = 444;
	                this.vfpdef();
	            }

	            this.state = 455;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,45,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 447;
	                    this.match(Python3Parser.COMMA);
	                    this.state = 448;
	                    this.vfpdef();
	                    this.state = 451;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===63) {
	                        this.state = 449;
	                        this.match(Python3Parser.ASSIGN);
	                        this.state = 450;
	                        this.test();
	                    }
	             
	                }
	                this.state = 457;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,45,this._ctx);
	            }

	            this.state = 466;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 458;
	                this.match(Python3Parser.COMMA);
	                this.state = 464;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===62) {
	                    this.state = 459;
	                    this.match(Python3Parser.POWER);
	                    this.state = 460;
	                    this.vfpdef();
	                    this.state = 462;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===59) {
	                        this.state = 461;
	                        this.match(Python3Parser.COMMA);
	                    }

	                }

	            }

	            break;
	        case 62:
	            this.state = 468;
	            this.match(Python3Parser.POWER);
	            this.state = 469;
	            this.vfpdef();
	            this.state = 471;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 470;
	                this.match(Python3Parser.COMMA);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vfpdef() {
	    let localctx = new VfpdefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, Python3Parser.RULE_vfpdef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 475;
	        this.name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stmt() {
	    let localctx = new StmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, Python3Parser.RULE_stmt);
	    try {
	        this.state = 479;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 477;
	            this.simple_stmts();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 478;
	            this.compound_stmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_stmts() {
	    let localctx = new Simple_stmtsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, Python3Parser.RULE_simple_stmts);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 481;
	        this.simple_stmt();
	        this.state = 486;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,52,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 482;
	                this.match(Python3Parser.SEMI_COLON);
	                this.state = 483;
	                this.simple_stmt(); 
	            }
	            this.state = 488;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,52,this._ctx);
	        }

	        this.state = 490;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===61) {
	            this.state = 489;
	            this.match(Python3Parser.SEMI_COLON);
	        }

	        this.state = 492;
	        this.match(Python3Parser.NEWLINE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simple_stmt() {
	    let localctx = new Simple_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, Python3Parser.RULE_simple_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 502;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 10:
	        case 20:
	        case 29:
	        case 30:
	        case 31:
	        case 33:
	        case 38:
	        case 40:
	        case 45:
	        case 55:
	        case 56:
	        case 57:
	        case 64:
	        case 71:
	        case 72:
	        case 76:
	        case 77:
	            this.state = 494;
	            this.expr_stmt();
	            break;
	        case 16:
	            this.state = 495;
	            this.del_stmt();
	            break;
	        case 35:
	            this.state = 496;
	            this.pass_stmt();
	            break;
	        case 11:
	        case 14:
	        case 36:
	        case 37:
	        case 43:
	            this.state = 497;
	            this.flow_stmt();
	            break;
	        case 23:
	        case 26:
	            this.state = 498;
	            this.import_stmt();
	            break;
	        case 24:
	            this.state = 499;
	            this.global_stmt();
	            break;
	        case 32:
	            this.state = 500;
	            this.nonlocal_stmt();
	            break;
	        case 8:
	            this.state = 501;
	            this.assert_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expr_stmt() {
	    let localctx = new Expr_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, Python3Parser.RULE_expr_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 504;
	        this.testlist_star_expr();
	        this.state = 521;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	            this.state = 505;
	            this.annassign();
	            break;
	        case 88:
	        case 89:
	        case 90:
	        case 91:
	        case 92:
	        case 93:
	        case 94:
	        case 95:
	        case 96:
	        case 97:
	        case 98:
	        case 99:
	        case 100:
	            this.state = 506;
	            this.augassign();
	            this.state = 509;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 43:
	                this.state = 507;
	                this.yield_expr();
	                break;
	            case 3:
	            case 4:
	            case 10:
	            case 20:
	            case 29:
	            case 30:
	            case 31:
	            case 33:
	            case 38:
	            case 40:
	            case 45:
	            case 55:
	            case 57:
	            case 64:
	            case 71:
	            case 72:
	            case 76:
	            case 77:
	                this.state = 508;
	                this.testlist();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 44:
	        case 61:
	        case 63:
	            this.state = 518;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===63) {
	                this.state = 511;
	                this.match(Python3Parser.ASSIGN);
	                this.state = 514;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 43:
	                    this.state = 512;
	                    this.yield_expr();
	                    break;
	                case 3:
	                case 4:
	                case 10:
	                case 20:
	                case 29:
	                case 30:
	                case 31:
	                case 33:
	                case 38:
	                case 40:
	                case 45:
	                case 55:
	                case 56:
	                case 57:
	                case 64:
	                case 71:
	                case 72:
	                case 76:
	                case 77:
	                    this.state = 513;
	                    this.testlist_star_expr();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 520;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annassign() {
	    let localctx = new AnnassignContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, Python3Parser.RULE_annassign);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 523;
	        this.match(Python3Parser.COLON);
	        this.state = 524;
	        this.test();
	        this.state = 527;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===63) {
	            this.state = 525;
	            this.match(Python3Parser.ASSIGN);
	            this.state = 526;
	            this.test();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	testlist_star_expr() {
	    let localctx = new Testlist_star_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, Python3Parser.RULE_testlist_star_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 531;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 10:
	        case 20:
	        case 29:
	        case 30:
	        case 31:
	        case 33:
	        case 38:
	        case 40:
	        case 45:
	        case 55:
	        case 57:
	        case 64:
	        case 71:
	        case 72:
	        case 76:
	        case 77:
	            this.state = 529;
	            this.test();
	            break;
	        case 56:
	            this.state = 530;
	            this.star_expr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 540;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,62,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 533;
	                this.match(Python3Parser.COMMA);
	                this.state = 536;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 3:
	                case 4:
	                case 10:
	                case 20:
	                case 29:
	                case 30:
	                case 31:
	                case 33:
	                case 38:
	                case 40:
	                case 45:
	                case 55:
	                case 57:
	                case 64:
	                case 71:
	                case 72:
	                case 76:
	                case 77:
	                    this.state = 534;
	                    this.test();
	                    break;
	                case 56:
	                    this.state = 535;
	                    this.star_expr();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 542;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,62,this._ctx);
	        }

	        this.state = 544;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===59) {
	            this.state = 543;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	augassign() {
	    let localctx = new AugassignContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, Python3Parser.RULE_augassign);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 546;
	        _la = this._input.LA(1);
	        if(!(((((_la - 88)) & ~0x1f) === 0 && ((1 << (_la - 88)) & 8191) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	del_stmt() {
	    let localctx = new Del_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, Python3Parser.RULE_del_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 548;
	        this.match(Python3Parser.DEL);
	        this.state = 549;
	        this.exprlist();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pass_stmt() {
	    let localctx = new Pass_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, Python3Parser.RULE_pass_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 551;
	        this.match(Python3Parser.PASS);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flow_stmt() {
	    let localctx = new Flow_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, Python3Parser.RULE_flow_stmt);
	    try {
	        this.state = 558;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 11:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 553;
	            this.break_stmt();
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 554;
	            this.continue_stmt();
	            break;
	        case 37:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 555;
	            this.return_stmt();
	            break;
	        case 36:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 556;
	            this.raise_stmt();
	            break;
	        case 43:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 557;
	            this.yield_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	break_stmt() {
	    let localctx = new Break_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, Python3Parser.RULE_break_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 560;
	        this.match(Python3Parser.BREAK);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	continue_stmt() {
	    let localctx = new Continue_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, Python3Parser.RULE_continue_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 562;
	        this.match(Python3Parser.CONTINUE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	return_stmt() {
	    let localctx = new Return_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, Python3Parser.RULE_return_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 564;
	        this.match(Python3Parser.RETURN);
	        this.state = 566;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3759146008) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2168459425) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 99) !== 0)) {
	            this.state = 565;
	            this.testlist();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yield_stmt() {
	    let localctx = new Yield_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, Python3Parser.RULE_yield_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 568;
	        this.yield_expr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	raise_stmt() {
	    let localctx = new Raise_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, Python3Parser.RULE_raise_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 570;
	        this.match(Python3Parser.RAISE);
	        this.state = 576;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3759146008) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2168459425) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 99) !== 0)) {
	            this.state = 571;
	            this.test();
	            this.state = 574;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===23) {
	                this.state = 572;
	                this.match(Python3Parser.FROM);
	                this.state = 573;
	                this.test();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_stmt() {
	    let localctx = new Import_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, Python3Parser.RULE_import_stmt);
	    try {
	        this.state = 580;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 26:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 578;
	            this.import_name();
	            break;
	        case 23:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 579;
	            this.import_from();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_name() {
	    let localctx = new Import_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, Python3Parser.RULE_import_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 582;
	        this.match(Python3Parser.IMPORT);
	        this.state = 583;
	        this.dotted_as_names();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_from() {
	    let localctx = new Import_fromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, Python3Parser.RULE_import_from);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 585;
	        this.match(Python3Parser.FROM);
	        this.state = 598;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 589;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===54 || _la===55) {
	                this.state = 586;
	                _la = this._input.LA(1);
	                if(!(_la===54 || _la===55)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 591;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 592;
	            this.dotted_name();
	            break;

	        case 2:
	            this.state = 594; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 593;
	                _la = this._input.LA(1);
	                if(!(_la===54 || _la===55)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 596; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===54 || _la===55);
	            break;

	        }
	        this.state = 600;
	        this.match(Python3Parser.IMPORT);
	        this.state = 607;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	            this.state = 601;
	            this.match(Python3Parser.STAR);
	            break;
	        case 57:
	            this.state = 602;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 603;
	            this.import_as_names();
	            this.state = 604;
	            this.match(Python3Parser.CLOSE_PAREN);
	            break;
	        case 30:
	        case 40:
	        case 45:
	            this.state = 606;
	            this.import_as_names();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_as_name() {
	    let localctx = new Import_as_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, Python3Parser.RULE_import_as_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 609;
	        this.name();
	        this.state = 612;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 610;
	            this.match(Python3Parser.AS);
	            this.state = 611;
	            this.name();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotted_as_name() {
	    let localctx = new Dotted_as_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, Python3Parser.RULE_dotted_as_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 614;
	        this.dotted_name();
	        this.state = 617;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 615;
	            this.match(Python3Parser.AS);
	            this.state = 616;
	            this.name();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	import_as_names() {
	    let localctx = new Import_as_namesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, Python3Parser.RULE_import_as_names);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 619;
	        this.import_as_name();
	        this.state = 624;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 620;
	                this.match(Python3Parser.COMMA);
	                this.state = 621;
	                this.import_as_name(); 
	            }
	            this.state = 626;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
	        }

	        this.state = 628;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===59) {
	            this.state = 627;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotted_as_names() {
	    let localctx = new Dotted_as_namesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, Python3Parser.RULE_dotted_as_names);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 630;
	        this.dotted_as_name();
	        this.state = 635;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===59) {
	            this.state = 631;
	            this.match(Python3Parser.COMMA);
	            this.state = 632;
	            this.dotted_as_name();
	            this.state = 637;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotted_name() {
	    let localctx = new Dotted_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, Python3Parser.RULE_dotted_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 638;
	        this.name();
	        this.state = 643;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===54) {
	            this.state = 639;
	            this.match(Python3Parser.DOT);
	            this.state = 640;
	            this.name();
	            this.state = 645;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	global_stmt() {
	    let localctx = new Global_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, Python3Parser.RULE_global_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 646;
	        this.match(Python3Parser.GLOBAL);
	        this.state = 647;
	        this.name();
	        this.state = 652;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===59) {
	            this.state = 648;
	            this.match(Python3Parser.COMMA);
	            this.state = 649;
	            this.name();
	            this.state = 654;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonlocal_stmt() {
	    let localctx = new Nonlocal_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, Python3Parser.RULE_nonlocal_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 655;
	        this.match(Python3Parser.NONLOCAL);
	        this.state = 656;
	        this.name();
	        this.state = 661;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===59) {
	            this.state = 657;
	            this.match(Python3Parser.COMMA);
	            this.state = 658;
	            this.name();
	            this.state = 663;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assert_stmt() {
	    let localctx = new Assert_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, Python3Parser.RULE_assert_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 664;
	        this.match(Python3Parser.ASSERT);
	        this.state = 665;
	        this.test();
	        this.state = 668;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===59) {
	            this.state = 666;
	            this.match(Python3Parser.COMMA);
	            this.state = 667;
	            this.test();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compound_stmt() {
	    let localctx = new Compound_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, Python3Parser.RULE_compound_stmt);
	    try {
	        this.state = 680;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 25:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 670;
	            this.if_stmt();
	            break;
	        case 41:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 671;
	            this.while_stmt();
	            break;
	        case 22:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 672;
	            this.for_stmt();
	            break;
	        case 39:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 673;
	            this.try_stmt();
	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 674;
	            this.with_stmt();
	            break;
	        case 15:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 675;
	            this.funcdef();
	            break;
	        case 13:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 676;
	            this.classdef();
	            break;
	        case 86:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 677;
	            this.decorated();
	            break;
	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 678;
	            this.async_stmt();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 679;
	            this.match_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	async_stmt() {
	    let localctx = new Async_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, Python3Parser.RULE_async_stmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 682;
	        this.match(Python3Parser.ASYNC);
	        this.state = 686;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 15:
	            this.state = 683;
	            this.funcdef();
	            break;
	        case 42:
	            this.state = 684;
	            this.with_stmt();
	            break;
	        case 22:
	            this.state = 685;
	            this.for_stmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	if_stmt() {
	    let localctx = new If_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, Python3Parser.RULE_if_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 688;
	        this.match(Python3Parser.IF);
	        this.state = 689;
	        this.test();
	        this.state = 690;
	        this.match(Python3Parser.COLON);
	        this.state = 691;
	        this.block();
	        this.state = 699;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===17) {
	            this.state = 692;
	            this.match(Python3Parser.ELIF);
	            this.state = 693;
	            this.test();
	            this.state = 694;
	            this.match(Python3Parser.COLON);
	            this.state = 695;
	            this.block();
	            this.state = 701;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 705;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18) {
	            this.state = 702;
	            this.match(Python3Parser.ELSE);
	            this.state = 703;
	            this.match(Python3Parser.COLON);
	            this.state = 704;
	            this.block();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	while_stmt() {
	    let localctx = new While_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, Python3Parser.RULE_while_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 707;
	        this.match(Python3Parser.WHILE);
	        this.state = 708;
	        this.test();
	        this.state = 709;
	        this.match(Python3Parser.COLON);
	        this.state = 710;
	        this.block();
	        this.state = 714;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18) {
	            this.state = 711;
	            this.match(Python3Parser.ELSE);
	            this.state = 712;
	            this.match(Python3Parser.COLON);
	            this.state = 713;
	            this.block();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	for_stmt() {
	    let localctx = new For_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, Python3Parser.RULE_for_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 716;
	        this.match(Python3Parser.FOR);
	        this.state = 717;
	        this.exprlist();
	        this.state = 718;
	        this.match(Python3Parser.IN);
	        this.state = 719;
	        this.testlist();
	        this.state = 720;
	        this.match(Python3Parser.COLON);
	        this.state = 721;
	        this.block();
	        this.state = 725;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18) {
	            this.state = 722;
	            this.match(Python3Parser.ELSE);
	            this.state = 723;
	            this.match(Python3Parser.COLON);
	            this.state = 724;
	            this.block();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	try_stmt() {
	    let localctx = new Try_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, Python3Parser.RULE_try_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 727;
	        this.match(Python3Parser.TRY);
	        this.state = 728;
	        this.match(Python3Parser.COLON);
	        this.state = 729;
	        this.block();
	        this.state = 751;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 19:
	            this.state = 734; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 730;
	                this.except_clause();
	                this.state = 731;
	                this.match(Python3Parser.COLON);
	                this.state = 732;
	                this.block();
	                this.state = 736; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===19);
	            this.state = 741;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18) {
	                this.state = 738;
	                this.match(Python3Parser.ELSE);
	                this.state = 739;
	                this.match(Python3Parser.COLON);
	                this.state = 740;
	                this.block();
	            }

	            this.state = 746;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===21) {
	                this.state = 743;
	                this.match(Python3Parser.FINALLY);
	                this.state = 744;
	                this.match(Python3Parser.COLON);
	                this.state = 745;
	                this.block();
	            }

	            break;
	        case 21:
	            this.state = 748;
	            this.match(Python3Parser.FINALLY);
	            this.state = 749;
	            this.match(Python3Parser.COLON);
	            this.state = 750;
	            this.block();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_stmt() {
	    let localctx = new With_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, Python3Parser.RULE_with_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 753;
	        this.match(Python3Parser.WITH);
	        this.state = 754;
	        this.with_item();
	        this.state = 759;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===59) {
	            this.state = 755;
	            this.match(Python3Parser.COMMA);
	            this.state = 756;
	            this.with_item();
	            this.state = 761;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 762;
	        this.match(Python3Parser.COLON);
	        this.state = 763;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	with_item() {
	    let localctx = new With_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, Python3Parser.RULE_with_item);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 765;
	        this.test();
	        this.state = 768;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===7) {
	            this.state = 766;
	            this.match(Python3Parser.AS);
	            this.state = 767;
	            this.expr(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	except_clause() {
	    let localctx = new Except_clauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, Python3Parser.RULE_except_clause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 770;
	        this.match(Python3Parser.EXCEPT);
	        this.state = 776;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3759146008) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2168459425) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 99) !== 0)) {
	            this.state = 771;
	            this.test();
	            this.state = 774;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===7) {
	                this.state = 772;
	                this.match(Python3Parser.AS);
	                this.state = 773;
	                this.name();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	block() {
	    let localctx = new BlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, Python3Parser.RULE_block);
	    var _la = 0;
	    try {
	        this.state = 788;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 8:
	        case 10:
	        case 11:
	        case 14:
	        case 16:
	        case 20:
	        case 23:
	        case 24:
	        case 26:
	        case 29:
	        case 30:
	        case 31:
	        case 32:
	        case 33:
	        case 35:
	        case 36:
	        case 37:
	        case 38:
	        case 40:
	        case 43:
	        case 45:
	        case 55:
	        case 56:
	        case 57:
	        case 64:
	        case 71:
	        case 72:
	        case 76:
	        case 77:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 778;
	            this.simple_stmts();
	            break;
	        case 44:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 779;
	            this.match(Python3Parser.NEWLINE);
	            this.state = 780;
	            this.match(Python3Parser.INDENT);
	            this.state = 782; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 781;
	                this.stmt();
	                this.state = 784; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3889295128) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 58732539) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 4206977) !== 0));
	            this.state = 786;
	            this.match(Python3Parser.DEDENT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	match_stmt() {
	    let localctx = new Match_stmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, Python3Parser.RULE_match_stmt);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 790;
	        this.match(Python3Parser.MATCH);
	        this.state = 791;
	        this.subject_expr();
	        this.state = 792;
	        this.match(Python3Parser.COLON);
	        this.state = 793;
	        this.match(Python3Parser.NEWLINE);
	        this.state = 794;
	        this.match(Python3Parser.INDENT);
	        this.state = 796; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 795;
	            this.case_block();
	            this.state = 798; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===12);
	        this.state = 800;
	        this.match(Python3Parser.DEDENT);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subject_expr() {
	    let localctx = new Subject_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, Python3Parser.RULE_subject_expr);
	    var _la = 0;
	    try {
	        this.state = 808;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 802;
	            this.star_named_expression();
	            this.state = 803;
	            this.match(Python3Parser.COMMA);
	            this.state = 805;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 804;
	                this.star_named_expressions();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 807;
	            this.test();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	star_named_expressions() {
	    let localctx = new Star_named_expressionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, Python3Parser.RULE_star_named_expressions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 810;
	        this.match(Python3Parser.COMMA);
	        this.state = 812; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 811;
	            this.star_named_expression();
	            this.state = 814; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 3759146008) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2176848033) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 99) !== 0));
	        this.state = 817;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===59) {
	            this.state = 816;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	star_named_expression() {
	    let localctx = new Star_named_expressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, Python3Parser.RULE_star_named_expression);
	    try {
	        this.state = 822;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 819;
	            this.match(Python3Parser.STAR);
	            this.state = 820;
	            this.expr(0);
	            break;
	        case 3:
	        case 4:
	        case 10:
	        case 20:
	        case 29:
	        case 30:
	        case 31:
	        case 33:
	        case 38:
	        case 40:
	        case 45:
	        case 55:
	        case 57:
	        case 64:
	        case 71:
	        case 72:
	        case 76:
	        case 77:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 821;
	            this.test();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	case_block() {
	    let localctx = new Case_blockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, Python3Parser.RULE_case_block);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 824;
	        this.match(Python3Parser.CASE);
	        this.state = 825;
	        this.patterns();
	        this.state = 827;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===25) {
	            this.state = 826;
	            this.guard();
	        }

	        this.state = 829;
	        this.match(Python3Parser.COLON);
	        this.state = 830;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	guard() {
	    let localctx = new GuardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, Python3Parser.RULE_guard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 832;
	        this.match(Python3Parser.IF);
	        this.state = 833;
	        this.test();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	patterns() {
	    let localctx = new PatternsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, Python3Parser.RULE_patterns);
	    try {
	        this.state = 837;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 835;
	            this.open_sequence_pattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 836;
	            this.pattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern() {
	    let localctx = new PatternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, Python3Parser.RULE_pattern);
	    try {
	        this.state = 841;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 839;
	            this.as_pattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 840;
	            this.or_pattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	as_pattern() {
	    let localctx = new As_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, Python3Parser.RULE_as_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 843;
	        this.or_pattern();
	        this.state = 844;
	        this.match(Python3Parser.AS);
	        this.state = 845;
	        this.pattern_capture_target();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	or_pattern() {
	    let localctx = new Or_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, Python3Parser.RULE_or_pattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 847;
	        this.closed_pattern();
	        this.state = 852;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===66) {
	            this.state = 848;
	            this.match(Python3Parser.OR_OP);
	            this.state = 849;
	            this.closed_pattern();
	            this.state = 854;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	closed_pattern() {
	    let localctx = new Closed_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, Python3Parser.RULE_closed_pattern);
	    try {
	        this.state = 863;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 855;
	            this.literal_pattern();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 856;
	            this.capture_pattern();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 857;
	            this.wildcard_pattern();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 858;
	            this.value_pattern();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 859;
	            this.group_pattern();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 860;
	            this.sequence_pattern();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 861;
	            this.mapping_pattern();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 862;
	            this.class_pattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_pattern() {
	    let localctx = new Literal_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, Python3Parser.RULE_literal_pattern);
	    try {
	        this.state = 873;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 865;
	            this.signed_number();
	            this.state = 866;
	            if (!(  this.CannotBePlusMinus() )) {
	                throw new antlr4.error.FailedPredicateException(this, " this.CannotBePlusMinus() ");
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 868;
	            this.complex_number();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 869;
	            this.strings();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 870;
	            this.match(Python3Parser.NONE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 871;
	            this.match(Python3Parser.TRUE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 872;
	            this.match(Python3Parser.FALSE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal_expr() {
	    let localctx = new Literal_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, Python3Parser.RULE_literal_expr);
	    try {
	        this.state = 883;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 875;
	            this.signed_number();
	            this.state = 876;
	            if (!(  this.CannotBePlusMinus() )) {
	                throw new antlr4.error.FailedPredicateException(this, " this.CannotBePlusMinus() ");
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 878;
	            this.complex_number();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 879;
	            this.strings();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 880;
	            this.match(Python3Parser.NONE);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 881;
	            this.match(Python3Parser.TRUE);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 882;
	            this.match(Python3Parser.FALSE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	complex_number() {
	    let localctx = new Complex_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, Python3Parser.RULE_complex_number);
	    try {
	        this.state = 893;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 885;
	            this.signed_real_number();
	            this.state = 886;
	            this.match(Python3Parser.ADD);
	            this.state = 887;
	            this.imaginary_number();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 889;
	            this.signed_real_number();
	            this.state = 890;
	            this.match(Python3Parser.MINUS);
	            this.state = 891;
	            this.imaginary_number();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signed_number() {
	    let localctx = new Signed_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, Python3Parser.RULE_signed_number);
	    try {
	        this.state = 898;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 4:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 895;
	            this.match(Python3Parser.NUMBER);
	            break;
	        case 72:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 896;
	            this.match(Python3Parser.MINUS);
	            this.state = 897;
	            this.match(Python3Parser.NUMBER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signed_real_number() {
	    let localctx = new Signed_real_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, Python3Parser.RULE_signed_real_number);
	    try {
	        this.state = 903;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 4:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 900;
	            this.real_number();
	            break;
	        case 72:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 901;
	            this.match(Python3Parser.MINUS);
	            this.state = 902;
	            this.real_number();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	real_number() {
	    let localctx = new Real_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, Python3Parser.RULE_real_number);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 905;
	        this.match(Python3Parser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	imaginary_number() {
	    let localctx = new Imaginary_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, Python3Parser.RULE_imaginary_number);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 907;
	        this.match(Python3Parser.NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	capture_pattern() {
	    let localctx = new Capture_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, Python3Parser.RULE_capture_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 909;
	        this.pattern_capture_target();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pattern_capture_target() {
	    let localctx = new Pattern_capture_targetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, Python3Parser.RULE_pattern_capture_target);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 911;
	        this.name();
	        this.state = 912;
	        if (!(  this.CannotBeDotLpEq() )) {
	            throw new antlr4.error.FailedPredicateException(this, " this.CannotBeDotLpEq() ");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wildcard_pattern() {
	    let localctx = new Wildcard_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, Python3Parser.RULE_wildcard_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 914;
	        this.match(Python3Parser.UNDERSCORE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value_pattern() {
	    let localctx = new Value_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, Python3Parser.RULE_value_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 916;
	        this.attr();
	        this.state = 917;
	        if (!(  this.CannotBeDotLpEq() )) {
	            throw new antlr4.error.FailedPredicateException(this, " this.CannotBeDotLpEq() ");
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attr() {
	    let localctx = new AttrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, Python3Parser.RULE_attr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 919;
	        this.name();
	        this.state = 922; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 920;
	        		this.match(Python3Parser.DOT);
	        		this.state = 921;
	        		this.name();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 924; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,114, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name_or_attr() {
	    let localctx = new Name_or_attrContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, Python3Parser.RULE_name_or_attr);
	    try {
	        this.state = 928;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 926;
	            this.attr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 927;
	            this.name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	group_pattern() {
	    let localctx = new Group_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, Python3Parser.RULE_group_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 930;
	        this.match(Python3Parser.OPEN_PAREN);
	        this.state = 931;
	        this.pattern();
	        this.state = 932;
	        this.match(Python3Parser.CLOSE_PAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sequence_pattern() {
	    let localctx = new Sequence_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, Python3Parser.RULE_sequence_pattern);
	    var _la = 0;
	    try {
	        this.state = 944;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 64:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 934;
	            this.match(Python3Parser.OPEN_BRACK);
	            this.state = 936;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3222274072) !== 0) || ((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 67895429) !== 0) || _la===72 || _la===77) {
	                this.state = 935;
	                this.maybe_sequence_pattern();
	            }

	            this.state = 938;
	            this.match(Python3Parser.CLOSE_BRACK);
	            break;
	        case 57:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 939;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 941;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3222274072) !== 0) || ((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 67895429) !== 0) || _la===72 || _la===77) {
	                this.state = 940;
	                this.open_sequence_pattern();
	            }

	            this.state = 943;
	            this.match(Python3Parser.CLOSE_PAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	open_sequence_pattern() {
	    let localctx = new Open_sequence_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, Python3Parser.RULE_open_sequence_pattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 946;
	        this.maybe_star_pattern();
	        this.state = 947;
	        this.match(Python3Parser.COMMA);
	        this.state = 949;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3222274072) !== 0) || ((((_la - 38)) & ~0x1f) === 0 && ((1 << (_la - 38)) & 67895429) !== 0) || _la===72 || _la===77) {
	            this.state = 948;
	            this.maybe_sequence_pattern();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	maybe_sequence_pattern() {
	    let localctx = new Maybe_sequence_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, Python3Parser.RULE_maybe_sequence_pattern);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 951;
	        this.maybe_star_pattern();
	        this.state = 956;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,120,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 952;
	                this.match(Python3Parser.COMMA);
	                this.state = 953;
	                this.maybe_star_pattern(); 
	            }
	            this.state = 958;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,120,this._ctx);
	        }

	        this.state = 960;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===59) {
	            this.state = 959;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	maybe_star_pattern() {
	    let localctx = new Maybe_star_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, Python3Parser.RULE_maybe_star_pattern);
	    try {
	        this.state = 964;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 56:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 962;
	            this.star_pattern();
	            break;
	        case 3:
	        case 4:
	        case 20:
	        case 30:
	        case 31:
	        case 38:
	        case 40:
	        case 45:
	        case 57:
	        case 64:
	        case 72:
	        case 77:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 963;
	            this.pattern();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	star_pattern() {
	    let localctx = new Star_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, Python3Parser.RULE_star_pattern);
	    try {
	        this.state = 970;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 966;
	            this.match(Python3Parser.STAR);
	            this.state = 967;
	            this.pattern_capture_target();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 968;
	            this.match(Python3Parser.STAR);
	            this.state = 969;
	            this.wildcard_pattern();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapping_pattern() {
	    let localctx = new Mapping_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, Python3Parser.RULE_mapping_pattern);
	    var _la = 0;
	    try {
	        this.state = 997;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 972;
	            this.match(Python3Parser.OPEN_BRACE);
	            this.state = 973;
	            this.match(Python3Parser.CLOSE_BRACE);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 974;
	            this.match(Python3Parser.OPEN_BRACE);
	            this.state = 975;
	            this.double_star_pattern();
	            this.state = 977;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 976;
	                this.match(Python3Parser.COMMA);
	            }

	            this.state = 979;
	            this.match(Python3Parser.CLOSE_BRACE);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 981;
	            this.match(Python3Parser.OPEN_BRACE);
	            this.state = 982;
	            this.items_pattern();
	            this.state = 983;
	            this.match(Python3Parser.COMMA);
	            this.state = 984;
	            this.double_star_pattern();
	            this.state = 986;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 985;
	                this.match(Python3Parser.COMMA);
	            }

	            this.state = 988;
	            this.match(Python3Parser.CLOSE_BRACE);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 990;
	            this.match(Python3Parser.OPEN_BRACE);
	            this.state = 991;
	            this.items_pattern();
	            this.state = 993;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 992;
	                this.match(Python3Parser.COMMA);
	            }

	            this.state = 995;
	            this.match(Python3Parser.CLOSE_BRACE);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	items_pattern() {
	    let localctx = new Items_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, Python3Parser.RULE_items_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 999;
	        this.key_value_pattern();
	        this.state = 1004;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,128,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1000;
	                this.match(Python3Parser.COMMA);
	                this.state = 1001;
	                this.key_value_pattern(); 
	            }
	            this.state = 1006;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,128,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	key_value_pattern() {
	    let localctx = new Key_value_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, Python3Parser.RULE_key_value_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1009;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 20:
	        case 31:
	        case 38:
	        case 72:
	            this.state = 1007;
	            this.literal_expr();
	            break;
	        case 30:
	        case 40:
	        case 45:
	            this.state = 1008;
	            this.attr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1011;
	        this.match(Python3Parser.COLON);
	        this.state = 1012;
	        this.pattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	double_star_pattern() {
	    let localctx = new Double_star_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, Python3Parser.RULE_double_star_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1014;
	        this.match(Python3Parser.POWER);
	        this.state = 1015;
	        this.pattern_capture_target();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	class_pattern() {
	    let localctx = new Class_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, Python3Parser.RULE_class_pattern);
	    var _la = 0;
	    try {
	        this.state = 1047;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,133,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1017;
	            this.name_or_attr();
	            this.state = 1018;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 1019;
	            this.match(Python3Parser.CLOSE_PAREN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1021;
	            this.name_or_attr();
	            this.state = 1022;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 1023;
	            this.positional_patterns();
	            this.state = 1025;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 1024;
	                this.match(Python3Parser.COMMA);
	            }

	            this.state = 1027;
	            this.match(Python3Parser.CLOSE_PAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1029;
	            this.name_or_attr();
	            this.state = 1030;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 1031;
	            this.keyword_patterns();
	            this.state = 1033;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 1032;
	                this.match(Python3Parser.COMMA);
	            }

	            this.state = 1035;
	            this.match(Python3Parser.CLOSE_PAREN);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1037;
	            this.name_or_attr();
	            this.state = 1038;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 1039;
	            this.positional_patterns();
	            this.state = 1040;
	            this.match(Python3Parser.COMMA);
	            this.state = 1041;
	            this.keyword_patterns();
	            this.state = 1043;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 1042;
	                this.match(Python3Parser.COMMA);
	            }

	            this.state = 1045;
	            this.match(Python3Parser.CLOSE_PAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	positional_patterns() {
	    let localctx = new Positional_patternsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, Python3Parser.RULE_positional_patterns);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1049;
	        this.pattern();
	        this.state = 1054;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,134,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1050;
	                this.match(Python3Parser.COMMA);
	                this.state = 1051;
	                this.pattern(); 
	            }
	            this.state = 1056;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,134,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_patterns() {
	    let localctx = new Keyword_patternsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, Python3Parser.RULE_keyword_patterns);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1057;
	        this.keyword_pattern();
	        this.state = 1062;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,135,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1058;
	                this.match(Python3Parser.COMMA);
	                this.state = 1059;
	                this.keyword_pattern(); 
	            }
	            this.state = 1064;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,135,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword_pattern() {
	    let localctx = new Keyword_patternContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, Python3Parser.RULE_keyword_pattern);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1065;
	        this.name();
	        this.state = 1066;
	        this.match(Python3Parser.ASSIGN);
	        this.state = 1067;
	        this.pattern();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	test() {
	    let localctx = new TestContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, Python3Parser.RULE_test);
	    var _la = 0;
	    try {
	        this.state = 1078;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 10:
	        case 20:
	        case 30:
	        case 31:
	        case 33:
	        case 38:
	        case 40:
	        case 45:
	        case 55:
	        case 57:
	        case 64:
	        case 71:
	        case 72:
	        case 76:
	        case 77:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1069;
	            this.or_test();
	            this.state = 1075;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===25) {
	                this.state = 1070;
	                this.match(Python3Parser.IF);
	                this.state = 1071;
	                this.or_test();
	                this.state = 1072;
	                this.match(Python3Parser.ELSE);
	                this.state = 1073;
	                this.test();
	            }

	            break;
	        case 29:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1077;
	            this.lambdef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	test_nocond() {
	    let localctx = new Test_nocondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, Python3Parser.RULE_test_nocond);
	    try {
	        this.state = 1082;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 10:
	        case 20:
	        case 30:
	        case 31:
	        case 33:
	        case 38:
	        case 40:
	        case 45:
	        case 55:
	        case 57:
	        case 64:
	        case 71:
	        case 72:
	        case 76:
	        case 77:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1080;
	            this.or_test();
	            break;
	        case 29:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1081;
	            this.lambdef_nocond();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdef() {
	    let localctx = new LambdefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, Python3Parser.RULE_lambdef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1084;
	        this.match(Python3Parser.LAMBDA);
	        this.state = 1086;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===30 || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 4259873) !== 0)) {
	            this.state = 1085;
	            this.varargslist();
	        }

	        this.state = 1088;
	        this.match(Python3Parser.COLON);
	        this.state = 1089;
	        this.test();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lambdef_nocond() {
	    let localctx = new Lambdef_nocondContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, Python3Parser.RULE_lambdef_nocond);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1091;
	        this.match(Python3Parser.LAMBDA);
	        this.state = 1093;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===30 || ((((_la - 40)) & ~0x1f) === 0 && ((1 << (_la - 40)) & 4259873) !== 0)) {
	            this.state = 1092;
	            this.varargslist();
	        }

	        this.state = 1095;
	        this.match(Python3Parser.COLON);
	        this.state = 1096;
	        this.test_nocond();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	or_test() {
	    let localctx = new Or_testContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, Python3Parser.RULE_or_test);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1098;
	        this.and_test();
	        this.state = 1103;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===34) {
	            this.state = 1099;
	            this.match(Python3Parser.OR);
	            this.state = 1100;
	            this.and_test();
	            this.state = 1105;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	and_test() {
	    let localctx = new And_testContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, Python3Parser.RULE_and_test);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1106;
	        this.not_test();
	        this.state = 1111;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===6) {
	            this.state = 1107;
	            this.match(Python3Parser.AND);
	            this.state = 1108;
	            this.not_test();
	            this.state = 1113;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	not_test() {
	    let localctx = new Not_testContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, Python3Parser.RULE_not_test);
	    try {
	        this.state = 1117;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 33:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1114;
	            this.match(Python3Parser.NOT);
	            this.state = 1115;
	            this.not_test();
	            break;
	        case 3:
	        case 4:
	        case 10:
	        case 20:
	        case 30:
	        case 31:
	        case 38:
	        case 40:
	        case 45:
	        case 55:
	        case 57:
	        case 64:
	        case 71:
	        case 72:
	        case 76:
	        case 77:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1116;
	            this.comparison();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comparison() {
	    let localctx = new ComparisonContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, Python3Parser.RULE_comparison);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1119;
	        this.expr(0);
	        this.state = 1125;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,144,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1120;
	                this.comp_op();
	                this.state = 1121;
	                this.expr(0); 
	            }
	            this.state = 1127;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,144,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comp_op() {
	    let localctx = new Comp_opContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, Python3Parser.RULE_comp_op);
	    try {
	        this.state = 1141;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1128;
	            this.match(Python3Parser.LESS_THAN);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1129;
	            this.match(Python3Parser.GREATER_THAN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1130;
	            this.match(Python3Parser.EQUALS);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1131;
	            this.match(Python3Parser.GT_EQ);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1132;
	            this.match(Python3Parser.LT_EQ);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1133;
	            this.match(Python3Parser.NOT_EQ_1);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1134;
	            this.match(Python3Parser.NOT_EQ_2);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1135;
	            this.match(Python3Parser.IN);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1136;
	            this.match(Python3Parser.NOT);
	            this.state = 1137;
	            this.match(Python3Parser.IN);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1138;
	            this.match(Python3Parser.IS);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1139;
	            this.match(Python3Parser.IS);
	            this.state = 1140;
	            this.match(Python3Parser.NOT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	star_expr() {
	    let localctx = new Star_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, Python3Parser.RULE_star_expr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1143;
	        this.match(Python3Parser.STAR);
	        this.state = 1144;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 194;
	    this.enterRecursionRule(localctx, 194, Python3Parser.RULE_expr, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1154;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 10:
	        case 20:
	        case 30:
	        case 31:
	        case 38:
	        case 40:
	        case 45:
	        case 55:
	        case 57:
	        case 64:
	        case 77:
	            this.state = 1147;
	            this.atom_expr();
	            break;
	        case 71:
	        case 72:
	        case 76:
	            this.state = 1149; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1148;
	            		_la = this._input.LA(1);
	            		if(!(((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 35) !== 0))) {
	            		this._errHandler.recoverInline(this);
	            		}
	            		else {
	            			this._errHandler.reportMatch(this);
	            		    this.consume();
	            		}
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1151; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,146, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            this.state = 1153;
	            this.expr(7);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1179;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,149,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1177;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,148,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Python3Parser.RULE_expr);
	                    this.state = 1156;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 1157;
	                    this.match(Python3Parser.POWER);
	                    this.state = 1158;
	                    this.expr(9);
	                    break;

	                case 2:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Python3Parser.RULE_expr);
	                    this.state = 1159;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 1160;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 56)) & ~0x1f) === 0 && ((1 << (_la - 56)) & 1074659329) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1161;
	                    this.expr(7);
	                    break;

	                case 3:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Python3Parser.RULE_expr);
	                    this.state = 1162;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 1163;
	                    _la = this._input.LA(1);
	                    if(!(_la===71 || _la===72)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1164;
	                    this.expr(6);
	                    break;

	                case 4:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Python3Parser.RULE_expr);
	                    this.state = 1165;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 1166;
	                    _la = this._input.LA(1);
	                    if(!(_la===69 || _la===70)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1167;
	                    this.expr(5);
	                    break;

	                case 5:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Python3Parser.RULE_expr);
	                    this.state = 1168;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 1169;
	                    this.match(Python3Parser.AND_OP);
	                    this.state = 1170;
	                    this.expr(4);
	                    break;

	                case 6:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Python3Parser.RULE_expr);
	                    this.state = 1171;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 1172;
	                    this.match(Python3Parser.XOR);
	                    this.state = 1173;
	                    this.expr(3);
	                    break;

	                case 7:
	                    localctx = new ExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, Python3Parser.RULE_expr);
	                    this.state = 1174;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 1175;
	                    this.match(Python3Parser.OR_OP);
	                    this.state = 1176;
	                    this.expr(2);
	                    break;

	                } 
	            }
	            this.state = 1181;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,149,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	atom_expr() {
	    let localctx = new Atom_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, Python3Parser.RULE_atom_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1183;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===10) {
	            this.state = 1182;
	            this.match(Python3Parser.AWAIT);
	        }

	        this.state = 1185;
	        this.atom();
	        this.state = 1189;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,151,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1186;
	                this.trailer(); 
	            }
	            this.state = 1191;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,151,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atom() {
	    let localctx = new AtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, Python3Parser.RULE_atom);
	    var _la = 0;
	    try {
	        this.state = 1219;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 57:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1192;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 1195;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 43:
	            	this.state = 1193;
	            	this.yield_expr();
	            	break;
	            case 3:
	            case 4:
	            case 10:
	            case 20:
	            case 29:
	            case 30:
	            case 31:
	            case 33:
	            case 38:
	            case 40:
	            case 45:
	            case 55:
	            case 56:
	            case 57:
	            case 64:
	            case 71:
	            case 72:
	            case 76:
	            case 77:
	            	this.state = 1194;
	            	this.testlist_comp();
	            	break;
	            case 58:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 1197;
	            this.match(Python3Parser.CLOSE_PAREN);
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1198;
	            this.match(Python3Parser.OPEN_BRACK);
	            this.state = 1200;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3759146008) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2176848033) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 99) !== 0)) {
	                this.state = 1199;
	                this.testlist_comp();
	            }

	            this.state = 1202;
	            this.match(Python3Parser.CLOSE_BRACK);
	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1203;
	            this.match(Python3Parser.OPEN_BRACE);
	            this.state = 1205;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3759146008) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2713718945) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 99) !== 0)) {
	                this.state = 1204;
	                this.dictorsetmaker();
	            }

	            this.state = 1207;
	            this.match(Python3Parser.CLOSE_BRACE);
	            break;
	        case 30:
	        case 40:
	        case 45:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1208;
	            this.name();
	            break;
	        case 4:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1209;
	            this.match(Python3Parser.NUMBER);
	            break;
	        case 3:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1211; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1210;
	            		this.match(Python3Parser.STRING);
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1213; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,155, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;
	        case 55:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1215;
	            this.match(Python3Parser.ELLIPSIS);
	            break;
	        case 31:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1216;
	            this.match(Python3Parser.NONE);
	            break;
	        case 38:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1217;
	            this.match(Python3Parser.TRUE);
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1218;
	            this.match(Python3Parser.FALSE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, Python3Parser.RULE_name);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1221;
	        _la = this._input.LA(1);
	        if(!(((((_la - 30)) & ~0x1f) === 0 && ((1 << (_la - 30)) & 33793) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	testlist_comp() {
	    let localctx = new Testlist_compContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, Python3Parser.RULE_testlist_comp);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1225;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 10:
	        case 20:
	        case 29:
	        case 30:
	        case 31:
	        case 33:
	        case 38:
	        case 40:
	        case 45:
	        case 55:
	        case 57:
	        case 64:
	        case 71:
	        case 72:
	        case 76:
	        case 77:
	            this.state = 1223;
	            this.test();
	            break;
	        case 56:
	            this.state = 1224;
	            this.star_expr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1241;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 9:
	        case 22:
	            this.state = 1227;
	            this.comp_for();
	            break;
	        case 58:
	        case 59:
	        case 65:
	            this.state = 1235;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,159,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 1228;
	                    this.match(Python3Parser.COMMA);
	                    this.state = 1231;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case 3:
	                    case 4:
	                    case 10:
	                    case 20:
	                    case 29:
	                    case 30:
	                    case 31:
	                    case 33:
	                    case 38:
	                    case 40:
	                    case 45:
	                    case 55:
	                    case 57:
	                    case 64:
	                    case 71:
	                    case 72:
	                    case 76:
	                    case 77:
	                        this.state = 1229;
	                        this.test();
	                        break;
	                    case 56:
	                        this.state = 1230;
	                        this.star_expr();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    } 
	                }
	                this.state = 1237;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,159,this._ctx);
	            }

	            this.state = 1239;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===59) {
	                this.state = 1238;
	                this.match(Python3Parser.COMMA);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trailer() {
	    let localctx = new TrailerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, Python3Parser.RULE_trailer);
	    var _la = 0;
	    try {
	        this.state = 1254;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 57:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1243;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 1245;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3759146008) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2713718945) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 99) !== 0)) {
	                this.state = 1244;
	                this.arglist();
	            }

	            this.state = 1247;
	            this.match(Python3Parser.CLOSE_PAREN);
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1248;
	            this.match(Python3Parser.OPEN_BRACK);
	            this.state = 1249;
	            this.subscriptlist();
	            this.state = 1250;
	            this.match(Python3Parser.CLOSE_BRACK);
	            break;
	        case 54:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1252;
	            this.match(Python3Parser.DOT);
	            this.state = 1253;
	            this.name();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subscriptlist() {
	    let localctx = new SubscriptlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, Python3Parser.RULE_subscriptlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1256;
	        this.subscript_();
	        this.state = 1261;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,164,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1257;
	                this.match(Python3Parser.COMMA);
	                this.state = 1258;
	                this.subscript_(); 
	            }
	            this.state = 1263;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,164,this._ctx);
	        }

	        this.state = 1265;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===59) {
	            this.state = 1264;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subscript_() {
	    let localctx = new Subscript_Context(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, Python3Parser.RULE_subscript_);
	    var _la = 0;
	    try {
	        this.state = 1278;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1267;
	            this.test();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1269;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3759146008) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2168459425) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 99) !== 0)) {
	                this.state = 1268;
	                this.test();
	            }

	            this.state = 1271;
	            this.match(Python3Parser.COLON);
	            this.state = 1273;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3759146008) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2168459425) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 99) !== 0)) {
	                this.state = 1272;
	                this.test();
	            }

	            this.state = 1276;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===60) {
	                this.state = 1275;
	                this.sliceop();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sliceop() {
	    let localctx = new SliceopContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, Python3Parser.RULE_sliceop);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1280;
	        this.match(Python3Parser.COLON);
	        this.state = 1282;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3759146008) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2168459425) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 99) !== 0)) {
	            this.state = 1281;
	            this.test();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprlist() {
	    let localctx = new ExprlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, Python3Parser.RULE_exprlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1286;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 3:
	        case 4:
	        case 10:
	        case 20:
	        case 30:
	        case 31:
	        case 38:
	        case 40:
	        case 45:
	        case 55:
	        case 57:
	        case 64:
	        case 71:
	        case 72:
	        case 76:
	        case 77:
	            this.state = 1284;
	            this.expr(0);
	            break;
	        case 56:
	            this.state = 1285;
	            this.star_expr();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1295;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,173,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1288;
	                this.match(Python3Parser.COMMA);
	                this.state = 1291;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 3:
	                case 4:
	                case 10:
	                case 20:
	                case 30:
	                case 31:
	                case 38:
	                case 40:
	                case 45:
	                case 55:
	                case 57:
	                case 64:
	                case 71:
	                case 72:
	                case 76:
	                case 77:
	                    this.state = 1289;
	                    this.expr(0);
	                    break;
	                case 56:
	                    this.state = 1290;
	                    this.star_expr();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1297;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,173,this._ctx);
	        }

	        this.state = 1299;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===59) {
	            this.state = 1298;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	testlist() {
	    let localctx = new TestlistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, Python3Parser.RULE_testlist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1301;
	        this.test();
	        this.state = 1306;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,175,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1302;
	                this.match(Python3Parser.COMMA);
	                this.state = 1303;
	                this.test(); 
	            }
	            this.state = 1308;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,175,this._ctx);
	        }

	        this.state = 1310;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===59) {
	            this.state = 1309;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictorsetmaker() {
	    let localctx = new DictorsetmakerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, Python3Parser.RULE_dictorsetmaker);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1360;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,187,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1318;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 3:
	            case 4:
	            case 10:
	            case 20:
	            case 29:
	            case 30:
	            case 31:
	            case 33:
	            case 38:
	            case 40:
	            case 45:
	            case 55:
	            case 57:
	            case 64:
	            case 71:
	            case 72:
	            case 76:
	            case 77:
	                this.state = 1312;
	                this.test();
	                this.state = 1313;
	                this.match(Python3Parser.COLON);
	                this.state = 1314;
	                this.test();
	                break;
	            case 62:
	                this.state = 1316;
	                this.match(Python3Parser.POWER);
	                this.state = 1317;
	                this.expr(0);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1338;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 9:
	            case 22:
	                this.state = 1320;
	                this.comp_for();
	                break;
	            case 59:
	            case 78:
	                this.state = 1332;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,179,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1321;
	                        this.match(Python3Parser.COMMA);
	                        this.state = 1328;
	                        this._errHandler.sync(this);
	                        switch(this._input.LA(1)) {
	                        case 3:
	                        case 4:
	                        case 10:
	                        case 20:
	                        case 29:
	                        case 30:
	                        case 31:
	                        case 33:
	                        case 38:
	                        case 40:
	                        case 45:
	                        case 55:
	                        case 57:
	                        case 64:
	                        case 71:
	                        case 72:
	                        case 76:
	                        case 77:
	                            this.state = 1322;
	                            this.test();
	                            this.state = 1323;
	                            this.match(Python3Parser.COLON);
	                            this.state = 1324;
	                            this.test();
	                            break;
	                        case 62:
	                            this.state = 1326;
	                            this.match(Python3Parser.POWER);
	                            this.state = 1327;
	                            this.expr(0);
	                            break;
	                        default:
	                            throw new antlr4.error.NoViableAltException(this);
	                        } 
	                    }
	                    this.state = 1334;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,179,this._ctx);
	                }

	                this.state = 1336;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===59) {
	                    this.state = 1335;
	                    this.match(Python3Parser.COMMA);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.state = 1342;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 3:
	            case 4:
	            case 10:
	            case 20:
	            case 29:
	            case 30:
	            case 31:
	            case 33:
	            case 38:
	            case 40:
	            case 45:
	            case 55:
	            case 57:
	            case 64:
	            case 71:
	            case 72:
	            case 76:
	            case 77:
	                this.state = 1340;
	                this.test();
	                break;
	            case 56:
	                this.state = 1341;
	                this.star_expr();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1358;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 9:
	            case 22:
	                this.state = 1344;
	                this.comp_for();
	                break;
	            case 59:
	            case 78:
	                this.state = 1352;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,184,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 1345;
	                        this.match(Python3Parser.COMMA);
	                        this.state = 1348;
	                        this._errHandler.sync(this);
	                        switch(this._input.LA(1)) {
	                        case 3:
	                        case 4:
	                        case 10:
	                        case 20:
	                        case 29:
	                        case 30:
	                        case 31:
	                        case 33:
	                        case 38:
	                        case 40:
	                        case 45:
	                        case 55:
	                        case 57:
	                        case 64:
	                        case 71:
	                        case 72:
	                        case 76:
	                        case 77:
	                            this.state = 1346;
	                            this.test();
	                            break;
	                        case 56:
	                            this.state = 1347;
	                            this.star_expr();
	                            break;
	                        default:
	                            throw new antlr4.error.NoViableAltException(this);
	                        } 
	                    }
	                    this.state = 1354;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,184,this._ctx);
	                }

	                this.state = 1356;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===59) {
	                    this.state = 1355;
	                    this.match(Python3Parser.COMMA);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	classdef() {
	    let localctx = new ClassdefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, Python3Parser.RULE_classdef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1362;
	        this.match(Python3Parser.CLASS);
	        this.state = 1363;
	        this.name();
	        this.state = 1369;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===57) {
	            this.state = 1364;
	            this.match(Python3Parser.OPEN_PAREN);
	            this.state = 1366;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3759146008) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2713718945) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 99) !== 0)) {
	                this.state = 1365;
	                this.arglist();
	            }

	            this.state = 1368;
	            this.match(Python3Parser.CLOSE_PAREN);
	        }

	        this.state = 1371;
	        this.match(Python3Parser.COLON);
	        this.state = 1372;
	        this.block();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arglist() {
	    let localctx = new ArglistContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, Python3Parser.RULE_arglist);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1374;
	        this.argument();
	        this.state = 1379;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,190,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1375;
	                this.match(Python3Parser.COMMA);
	                this.state = 1376;
	                this.argument(); 
	            }
	            this.state = 1381;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,190,this._ctx);
	        }

	        this.state = 1383;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===59) {
	            this.state = 1382;
	            this.match(Python3Parser.COMMA);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	argument() {
	    let localctx = new ArgumentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, Python3Parser.RULE_argument);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1397;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1385;
	            this.test();
	            this.state = 1387;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===9 || _la===22) {
	                this.state = 1386;
	                this.comp_for();
	            }

	            break;

	        case 2:
	            this.state = 1389;
	            this.test();
	            this.state = 1390;
	            this.match(Python3Parser.ASSIGN);
	            this.state = 1391;
	            this.test();
	            break;

	        case 3:
	            this.state = 1393;
	            this.match(Python3Parser.POWER);
	            this.state = 1394;
	            this.test();
	            break;

	        case 4:
	            this.state = 1395;
	            this.match(Python3Parser.STAR);
	            this.state = 1396;
	            this.test();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comp_iter() {
	    let localctx = new Comp_iterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, Python3Parser.RULE_comp_iter);
	    try {
	        this.state = 1401;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 9:
	        case 22:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1399;
	            this.comp_for();
	            break;
	        case 25:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1400;
	            this.comp_if();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comp_for() {
	    let localctx = new Comp_forContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, Python3Parser.RULE_comp_for);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1404;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9) {
	            this.state = 1403;
	            this.match(Python3Parser.ASYNC);
	        }

	        this.state = 1406;
	        this.match(Python3Parser.FOR);
	        this.state = 1407;
	        this.exprlist();
	        this.state = 1408;
	        this.match(Python3Parser.IN);
	        this.state = 1409;
	        this.or_test();
	        this.state = 1411;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 37749248) !== 0)) {
	            this.state = 1410;
	            this.comp_iter();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	comp_if() {
	    let localctx = new Comp_ifContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, Python3Parser.RULE_comp_if);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1413;
	        this.match(Python3Parser.IF);
	        this.state = 1414;
	        this.test_nocond();
	        this.state = 1416;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 37749248) !== 0)) {
	            this.state = 1415;
	            this.comp_iter();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	encoding_decl() {
	    let localctx = new Encoding_declContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, Python3Parser.RULE_encoding_decl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1418;
	        this.name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yield_expr() {
	    let localctx = new Yield_exprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, Python3Parser.RULE_yield_expr);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1420;
	        this.match(Python3Parser.YIELD);
	        this.state = 1422;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) === 0 && ((1 << _la) & 3767534616) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 2168459425) !== 0) || ((((_la - 71)) & ~0x1f) === 0 && ((1 << (_la - 71)) & 99) !== 0)) {
	            this.state = 1421;
	            this.yield_arg();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	yield_arg() {
	    let localctx = new Yield_argContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, Python3Parser.RULE_yield_arg);
	    try {
	        this.state = 1427;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 23:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1424;
	            this.match(Python3Parser.FROM);
	            this.state = 1425;
	            this.test();
	            break;
	        case 3:
	        case 4:
	        case 10:
	        case 20:
	        case 29:
	        case 30:
	        case 31:
	        case 33:
	        case 38:
	        case 40:
	        case 45:
	        case 55:
	        case 57:
	        case 64:
	        case 71:
	        case 72:
	        case 76:
	        case 77:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1426;
	            this.testlist();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	strings() {
	    let localctx = new StringsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, Python3Parser.RULE_strings);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1430; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 1429;
	            this.match(Python3Parser.STRING);
	            this.state = 1432; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===3);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

Python3Parser.EOF = antlr4.Token.EOF;
Python3Parser.INDENT = 1;
Python3Parser.DEDENT = 2;
Python3Parser.STRING = 3;
Python3Parser.NUMBER = 4;
Python3Parser.INTEGER = 5;
Python3Parser.AND = 6;
Python3Parser.AS = 7;
Python3Parser.ASSERT = 8;
Python3Parser.ASYNC = 9;
Python3Parser.AWAIT = 10;
Python3Parser.BREAK = 11;
Python3Parser.CASE = 12;
Python3Parser.CLASS = 13;
Python3Parser.CONTINUE = 14;
Python3Parser.DEF = 15;
Python3Parser.DEL = 16;
Python3Parser.ELIF = 17;
Python3Parser.ELSE = 18;
Python3Parser.EXCEPT = 19;
Python3Parser.FALSE = 20;
Python3Parser.FINALLY = 21;
Python3Parser.FOR = 22;
Python3Parser.FROM = 23;
Python3Parser.GLOBAL = 24;
Python3Parser.IF = 25;
Python3Parser.IMPORT = 26;
Python3Parser.IN = 27;
Python3Parser.IS = 28;
Python3Parser.LAMBDA = 29;
Python3Parser.MATCH = 30;
Python3Parser.NONE = 31;
Python3Parser.NONLOCAL = 32;
Python3Parser.NOT = 33;
Python3Parser.OR = 34;
Python3Parser.PASS = 35;
Python3Parser.RAISE = 36;
Python3Parser.RETURN = 37;
Python3Parser.TRUE = 38;
Python3Parser.TRY = 39;
Python3Parser.UNDERSCORE = 40;
Python3Parser.WHILE = 41;
Python3Parser.WITH = 42;
Python3Parser.YIELD = 43;
Python3Parser.NEWLINE = 44;
Python3Parser.NAME = 45;
Python3Parser.STRING_LITERAL = 46;
Python3Parser.BYTES_LITERAL = 47;
Python3Parser.DECIMAL_INTEGER = 48;
Python3Parser.OCT_INTEGER = 49;
Python3Parser.HEX_INTEGER = 50;
Python3Parser.BIN_INTEGER = 51;
Python3Parser.FLOAT_NUMBER = 52;
Python3Parser.IMAG_NUMBER = 53;
Python3Parser.DOT = 54;
Python3Parser.ELLIPSIS = 55;
Python3Parser.STAR = 56;
Python3Parser.OPEN_PAREN = 57;
Python3Parser.CLOSE_PAREN = 58;
Python3Parser.COMMA = 59;
Python3Parser.COLON = 60;
Python3Parser.SEMI_COLON = 61;
Python3Parser.POWER = 62;
Python3Parser.ASSIGN = 63;
Python3Parser.OPEN_BRACK = 64;
Python3Parser.CLOSE_BRACK = 65;
Python3Parser.OR_OP = 66;
Python3Parser.XOR = 67;
Python3Parser.AND_OP = 68;
Python3Parser.LEFT_SHIFT = 69;
Python3Parser.RIGHT_SHIFT = 70;
Python3Parser.ADD = 71;
Python3Parser.MINUS = 72;
Python3Parser.DIV = 73;
Python3Parser.MOD = 74;
Python3Parser.IDIV = 75;
Python3Parser.NOT_OP = 76;
Python3Parser.OPEN_BRACE = 77;
Python3Parser.CLOSE_BRACE = 78;
Python3Parser.LESS_THAN = 79;
Python3Parser.GREATER_THAN = 80;
Python3Parser.EQUALS = 81;
Python3Parser.GT_EQ = 82;
Python3Parser.LT_EQ = 83;
Python3Parser.NOT_EQ_1 = 84;
Python3Parser.NOT_EQ_2 = 85;
Python3Parser.AT = 86;
Python3Parser.ARROW = 87;
Python3Parser.ADD_ASSIGN = 88;
Python3Parser.SUB_ASSIGN = 89;
Python3Parser.MULT_ASSIGN = 90;
Python3Parser.AT_ASSIGN = 91;
Python3Parser.DIV_ASSIGN = 92;
Python3Parser.MOD_ASSIGN = 93;
Python3Parser.AND_ASSIGN = 94;
Python3Parser.OR_ASSIGN = 95;
Python3Parser.XOR_ASSIGN = 96;
Python3Parser.LEFT_SHIFT_ASSIGN = 97;
Python3Parser.RIGHT_SHIFT_ASSIGN = 98;
Python3Parser.POWER_ASSIGN = 99;
Python3Parser.IDIV_ASSIGN = 100;
Python3Parser.SKIP_ = 101;
Python3Parser.UNKNOWN_CHAR = 102;

Python3Parser.RULE_single_input = 0;
Python3Parser.RULE_file_input = 1;
Python3Parser.RULE_eval_input = 2;
Python3Parser.RULE_decorator = 3;
Python3Parser.RULE_decorators = 4;
Python3Parser.RULE_decorated = 5;
Python3Parser.RULE_async_funcdef = 6;
Python3Parser.RULE_funcdef = 7;
Python3Parser.RULE_parameters = 8;
Python3Parser.RULE_typedargslist = 9;
Python3Parser.RULE_tfpdef = 10;
Python3Parser.RULE_varargslist = 11;
Python3Parser.RULE_vfpdef = 12;
Python3Parser.RULE_stmt = 13;
Python3Parser.RULE_simple_stmts = 14;
Python3Parser.RULE_simple_stmt = 15;
Python3Parser.RULE_expr_stmt = 16;
Python3Parser.RULE_annassign = 17;
Python3Parser.RULE_testlist_star_expr = 18;
Python3Parser.RULE_augassign = 19;
Python3Parser.RULE_del_stmt = 20;
Python3Parser.RULE_pass_stmt = 21;
Python3Parser.RULE_flow_stmt = 22;
Python3Parser.RULE_break_stmt = 23;
Python3Parser.RULE_continue_stmt = 24;
Python3Parser.RULE_return_stmt = 25;
Python3Parser.RULE_yield_stmt = 26;
Python3Parser.RULE_raise_stmt = 27;
Python3Parser.RULE_import_stmt = 28;
Python3Parser.RULE_import_name = 29;
Python3Parser.RULE_import_from = 30;
Python3Parser.RULE_import_as_name = 31;
Python3Parser.RULE_dotted_as_name = 32;
Python3Parser.RULE_import_as_names = 33;
Python3Parser.RULE_dotted_as_names = 34;
Python3Parser.RULE_dotted_name = 35;
Python3Parser.RULE_global_stmt = 36;
Python3Parser.RULE_nonlocal_stmt = 37;
Python3Parser.RULE_assert_stmt = 38;
Python3Parser.RULE_compound_stmt = 39;
Python3Parser.RULE_async_stmt = 40;
Python3Parser.RULE_if_stmt = 41;
Python3Parser.RULE_while_stmt = 42;
Python3Parser.RULE_for_stmt = 43;
Python3Parser.RULE_try_stmt = 44;
Python3Parser.RULE_with_stmt = 45;
Python3Parser.RULE_with_item = 46;
Python3Parser.RULE_except_clause = 47;
Python3Parser.RULE_block = 48;
Python3Parser.RULE_match_stmt = 49;
Python3Parser.RULE_subject_expr = 50;
Python3Parser.RULE_star_named_expressions = 51;
Python3Parser.RULE_star_named_expression = 52;
Python3Parser.RULE_case_block = 53;
Python3Parser.RULE_guard = 54;
Python3Parser.RULE_patterns = 55;
Python3Parser.RULE_pattern = 56;
Python3Parser.RULE_as_pattern = 57;
Python3Parser.RULE_or_pattern = 58;
Python3Parser.RULE_closed_pattern = 59;
Python3Parser.RULE_literal_pattern = 60;
Python3Parser.RULE_literal_expr = 61;
Python3Parser.RULE_complex_number = 62;
Python3Parser.RULE_signed_number = 63;
Python3Parser.RULE_signed_real_number = 64;
Python3Parser.RULE_real_number = 65;
Python3Parser.RULE_imaginary_number = 66;
Python3Parser.RULE_capture_pattern = 67;
Python3Parser.RULE_pattern_capture_target = 68;
Python3Parser.RULE_wildcard_pattern = 69;
Python3Parser.RULE_value_pattern = 70;
Python3Parser.RULE_attr = 71;
Python3Parser.RULE_name_or_attr = 72;
Python3Parser.RULE_group_pattern = 73;
Python3Parser.RULE_sequence_pattern = 74;
Python3Parser.RULE_open_sequence_pattern = 75;
Python3Parser.RULE_maybe_sequence_pattern = 76;
Python3Parser.RULE_maybe_star_pattern = 77;
Python3Parser.RULE_star_pattern = 78;
Python3Parser.RULE_mapping_pattern = 79;
Python3Parser.RULE_items_pattern = 80;
Python3Parser.RULE_key_value_pattern = 81;
Python3Parser.RULE_double_star_pattern = 82;
Python3Parser.RULE_class_pattern = 83;
Python3Parser.RULE_positional_patterns = 84;
Python3Parser.RULE_keyword_patterns = 85;
Python3Parser.RULE_keyword_pattern = 86;
Python3Parser.RULE_test = 87;
Python3Parser.RULE_test_nocond = 88;
Python3Parser.RULE_lambdef = 89;
Python3Parser.RULE_lambdef_nocond = 90;
Python3Parser.RULE_or_test = 91;
Python3Parser.RULE_and_test = 92;
Python3Parser.RULE_not_test = 93;
Python3Parser.RULE_comparison = 94;
Python3Parser.RULE_comp_op = 95;
Python3Parser.RULE_star_expr = 96;
Python3Parser.RULE_expr = 97;
Python3Parser.RULE_atom_expr = 98;
Python3Parser.RULE_atom = 99;
Python3Parser.RULE_name = 100;
Python3Parser.RULE_testlist_comp = 101;
Python3Parser.RULE_trailer = 102;
Python3Parser.RULE_subscriptlist = 103;
Python3Parser.RULE_subscript_ = 104;
Python3Parser.RULE_sliceop = 105;
Python3Parser.RULE_exprlist = 106;
Python3Parser.RULE_testlist = 107;
Python3Parser.RULE_dictorsetmaker = 108;
Python3Parser.RULE_classdef = 109;
Python3Parser.RULE_arglist = 110;
Python3Parser.RULE_argument = 111;
Python3Parser.RULE_comp_iter = 112;
Python3Parser.RULE_comp_for = 113;
Python3Parser.RULE_comp_if = 114;
Python3Parser.RULE_encoding_decl = 115;
Python3Parser.RULE_yield_expr = 116;
Python3Parser.RULE_yield_arg = 117;
Python3Parser.RULE_strings = 118;

class Single_inputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_single_input;
    }

	NEWLINE() {
	    return this.getToken(Python3Parser.NEWLINE, 0);
	};

	simple_stmts() {
	    return this.getTypedRuleContext(Simple_stmtsContext,0);
	};

	compound_stmt() {
	    return this.getTypedRuleContext(Compound_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterSingle_input(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitSingle_input(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitSingle_input(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class File_inputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_file_input;
    }

	EOF() {
	    return this.getToken(Python3Parser.EOF, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.NEWLINE);
	    } else {
	        return this.getToken(Python3Parser.NEWLINE, i);
	    }
	};


	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterFile_input(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitFile_input(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitFile_input(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Eval_inputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_eval_input;
    }

	testlist() {
	    return this.getTypedRuleContext(TestlistContext,0);
	};

	EOF() {
	    return this.getToken(Python3Parser.EOF, 0);
	};

	NEWLINE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.NEWLINE);
	    } else {
	        return this.getToken(Python3Parser.NEWLINE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterEval_input(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitEval_input(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitEval_input(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DecoratorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_decorator;
    }

	AT() {
	    return this.getToken(Python3Parser.AT, 0);
	};

	dotted_name() {
	    return this.getTypedRuleContext(Dotted_nameContext,0);
	};

	NEWLINE() {
	    return this.getToken(Python3Parser.NEWLINE, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	arglist() {
	    return this.getTypedRuleContext(ArglistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterDecorator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitDecorator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitDecorator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DecoratorsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_decorators;
    }

	decorator = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DecoratorContext);
	    } else {
	        return this.getTypedRuleContext(DecoratorContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterDecorators(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitDecorators(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitDecorators(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DecoratedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_decorated;
    }

	decorators() {
	    return this.getTypedRuleContext(DecoratorsContext,0);
	};

	classdef() {
	    return this.getTypedRuleContext(ClassdefContext,0);
	};

	funcdef() {
	    return this.getTypedRuleContext(FuncdefContext,0);
	};

	async_funcdef() {
	    return this.getTypedRuleContext(Async_funcdefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterDecorated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitDecorated(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitDecorated(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Async_funcdefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_async_funcdef;
    }

	ASYNC() {
	    return this.getToken(Python3Parser.ASYNC, 0);
	};

	funcdef() {
	    return this.getTypedRuleContext(FuncdefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAsync_funcdef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAsync_funcdef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAsync_funcdef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FuncdefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_funcdef;
    }

	DEF() {
	    return this.getToken(Python3Parser.DEF, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	parameters() {
	    return this.getTypedRuleContext(ParametersContext,0);
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	ARROW() {
	    return this.getToken(Python3Parser.ARROW, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterFuncdef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitFuncdef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitFuncdef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_parameters;
    }

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	typedargslist() {
	    return this.getTypedRuleContext(TypedargslistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterParameters(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitParameters(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypedargslistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_typedargslist;
    }

	tfpdef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TfpdefContext);
	    } else {
	        return this.getTypedRuleContext(TfpdefContext,i);
	    }
	};

	STAR() {
	    return this.getToken(Python3Parser.STAR, 0);
	};

	POWER() {
	    return this.getToken(Python3Parser.POWER, 0);
	};

	ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.ASSIGN);
	    } else {
	        return this.getToken(Python3Parser.ASSIGN, i);
	    }
	};


	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTypedargslist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTypedargslist(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTypedargslist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TfpdefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_tfpdef;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTfpdef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTfpdef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTfpdef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarargslistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_varargslist;
    }

	vfpdef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VfpdefContext);
	    } else {
	        return this.getTypedRuleContext(VfpdefContext,i);
	    }
	};

	STAR() {
	    return this.getToken(Python3Parser.STAR, 0);
	};

	POWER() {
	    return this.getToken(Python3Parser.POWER, 0);
	};

	ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.ASSIGN);
	    } else {
	        return this.getToken(Python3Parser.ASSIGN, i);
	    }
	};


	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterVarargslist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitVarargslist(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitVarargslist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VfpdefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_vfpdef;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterVfpdef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitVfpdef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitVfpdef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_stmt;
    }

	simple_stmts() {
	    return this.getTypedRuleContext(Simple_stmtsContext,0);
	};

	compound_stmt() {
	    return this.getTypedRuleContext(Compound_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Simple_stmtsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_simple_stmts;
    }

	simple_stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Simple_stmtContext);
	    } else {
	        return this.getTypedRuleContext(Simple_stmtContext,i);
	    }
	};

	NEWLINE() {
	    return this.getToken(Python3Parser.NEWLINE, 0);
	};

	SEMI_COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.SEMI_COLON);
	    } else {
	        return this.getToken(Python3Parser.SEMI_COLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterSimple_stmts(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitSimple_stmts(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitSimple_stmts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Simple_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_simple_stmt;
    }

	expr_stmt() {
	    return this.getTypedRuleContext(Expr_stmtContext,0);
	};

	del_stmt() {
	    return this.getTypedRuleContext(Del_stmtContext,0);
	};

	pass_stmt() {
	    return this.getTypedRuleContext(Pass_stmtContext,0);
	};

	flow_stmt() {
	    return this.getTypedRuleContext(Flow_stmtContext,0);
	};

	import_stmt() {
	    return this.getTypedRuleContext(Import_stmtContext,0);
	};

	global_stmt() {
	    return this.getTypedRuleContext(Global_stmtContext,0);
	};

	nonlocal_stmt() {
	    return this.getTypedRuleContext(Nonlocal_stmtContext,0);
	};

	assert_stmt() {
	    return this.getTypedRuleContext(Assert_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterSimple_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitSimple_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitSimple_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Expr_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_expr_stmt;
    }

	testlist_star_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Testlist_star_exprContext);
	    } else {
	        return this.getTypedRuleContext(Testlist_star_exprContext,i);
	    }
	};

	annassign() {
	    return this.getTypedRuleContext(AnnassignContext,0);
	};

	augassign() {
	    return this.getTypedRuleContext(AugassignContext,0);
	};

	yield_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Yield_exprContext);
	    } else {
	        return this.getTypedRuleContext(Yield_exprContext,i);
	    }
	};

	testlist() {
	    return this.getTypedRuleContext(TestlistContext,0);
	};

	ASSIGN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.ASSIGN);
	    } else {
	        return this.getToken(Python3Parser.ASSIGN, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterExpr_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitExpr_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitExpr_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AnnassignContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_annassign;
    }

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	ASSIGN() {
	    return this.getToken(Python3Parser.ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAnnassign(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAnnassign(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAnnassign(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Testlist_star_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_testlist_star_expr;
    }

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	star_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Star_exprContext);
	    } else {
	        return this.getTypedRuleContext(Star_exprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTestlist_star_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTestlist_star_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTestlist_star_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AugassignContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_augassign;
    }

	ADD_ASSIGN() {
	    return this.getToken(Python3Parser.ADD_ASSIGN, 0);
	};

	SUB_ASSIGN() {
	    return this.getToken(Python3Parser.SUB_ASSIGN, 0);
	};

	MULT_ASSIGN() {
	    return this.getToken(Python3Parser.MULT_ASSIGN, 0);
	};

	AT_ASSIGN() {
	    return this.getToken(Python3Parser.AT_ASSIGN, 0);
	};

	DIV_ASSIGN() {
	    return this.getToken(Python3Parser.DIV_ASSIGN, 0);
	};

	MOD_ASSIGN() {
	    return this.getToken(Python3Parser.MOD_ASSIGN, 0);
	};

	AND_ASSIGN() {
	    return this.getToken(Python3Parser.AND_ASSIGN, 0);
	};

	OR_ASSIGN() {
	    return this.getToken(Python3Parser.OR_ASSIGN, 0);
	};

	XOR_ASSIGN() {
	    return this.getToken(Python3Parser.XOR_ASSIGN, 0);
	};

	LEFT_SHIFT_ASSIGN() {
	    return this.getToken(Python3Parser.LEFT_SHIFT_ASSIGN, 0);
	};

	RIGHT_SHIFT_ASSIGN() {
	    return this.getToken(Python3Parser.RIGHT_SHIFT_ASSIGN, 0);
	};

	POWER_ASSIGN() {
	    return this.getToken(Python3Parser.POWER_ASSIGN, 0);
	};

	IDIV_ASSIGN() {
	    return this.getToken(Python3Parser.IDIV_ASSIGN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAugassign(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAugassign(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAugassign(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Del_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_del_stmt;
    }

	DEL() {
	    return this.getToken(Python3Parser.DEL, 0);
	};

	exprlist() {
	    return this.getTypedRuleContext(ExprlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterDel_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitDel_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitDel_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Pass_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_pass_stmt;
    }

	PASS() {
	    return this.getToken(Python3Parser.PASS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterPass_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitPass_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitPass_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Flow_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_flow_stmt;
    }

	break_stmt() {
	    return this.getTypedRuleContext(Break_stmtContext,0);
	};

	continue_stmt() {
	    return this.getTypedRuleContext(Continue_stmtContext,0);
	};

	return_stmt() {
	    return this.getTypedRuleContext(Return_stmtContext,0);
	};

	raise_stmt() {
	    return this.getTypedRuleContext(Raise_stmtContext,0);
	};

	yield_stmt() {
	    return this.getTypedRuleContext(Yield_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterFlow_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitFlow_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitFlow_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Break_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_break_stmt;
    }

	BREAK() {
	    return this.getToken(Python3Parser.BREAK, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterBreak_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitBreak_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitBreak_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Continue_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_continue_stmt;
    }

	CONTINUE() {
	    return this.getToken(Python3Parser.CONTINUE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterContinue_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitContinue_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitContinue_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Return_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_return_stmt;
    }

	RETURN() {
	    return this.getToken(Python3Parser.RETURN, 0);
	};

	testlist() {
	    return this.getTypedRuleContext(TestlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterReturn_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitReturn_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitReturn_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Yield_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_yield_stmt;
    }

	yield_expr() {
	    return this.getTypedRuleContext(Yield_exprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterYield_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitYield_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitYield_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Raise_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_raise_stmt;
    }

	RAISE() {
	    return this.getToken(Python3Parser.RAISE, 0);
	};

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	FROM() {
	    return this.getToken(Python3Parser.FROM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterRaise_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitRaise_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitRaise_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Import_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_import_stmt;
    }

	import_name() {
	    return this.getTypedRuleContext(Import_nameContext,0);
	};

	import_from() {
	    return this.getTypedRuleContext(Import_fromContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterImport_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitImport_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitImport_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Import_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_import_name;
    }

	IMPORT() {
	    return this.getToken(Python3Parser.IMPORT, 0);
	};

	dotted_as_names() {
	    return this.getTypedRuleContext(Dotted_as_namesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterImport_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitImport_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitImport_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Import_fromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_import_from;
    }

	FROM() {
	    return this.getToken(Python3Parser.FROM, 0);
	};

	IMPORT() {
	    return this.getToken(Python3Parser.IMPORT, 0);
	};

	dotted_name() {
	    return this.getTypedRuleContext(Dotted_nameContext,0);
	};

	STAR() {
	    return this.getToken(Python3Parser.STAR, 0);
	};

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	import_as_names() {
	    return this.getTypedRuleContext(Import_as_namesContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.DOT);
	    } else {
	        return this.getToken(Python3Parser.DOT, i);
	    }
	};


	ELLIPSIS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.ELLIPSIS);
	    } else {
	        return this.getToken(Python3Parser.ELLIPSIS, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterImport_from(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitImport_from(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitImport_from(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Import_as_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_import_as_name;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	AS() {
	    return this.getToken(Python3Parser.AS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterImport_as_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitImport_as_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitImport_as_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Dotted_as_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_dotted_as_name;
    }

	dotted_name() {
	    return this.getTypedRuleContext(Dotted_nameContext,0);
	};

	AS() {
	    return this.getToken(Python3Parser.AS, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterDotted_as_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitDotted_as_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitDotted_as_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Import_as_namesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_import_as_names;
    }

	import_as_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Import_as_nameContext);
	    } else {
	        return this.getTypedRuleContext(Import_as_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterImport_as_names(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitImport_as_names(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitImport_as_names(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Dotted_as_namesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_dotted_as_names;
    }

	dotted_as_name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Dotted_as_nameContext);
	    } else {
	        return this.getTypedRuleContext(Dotted_as_nameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterDotted_as_names(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitDotted_as_names(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitDotted_as_names(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Dotted_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_dotted_name;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.DOT);
	    } else {
	        return this.getToken(Python3Parser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterDotted_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitDotted_name(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitDotted_name(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Global_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_global_stmt;
    }

	GLOBAL() {
	    return this.getToken(Python3Parser.GLOBAL, 0);
	};

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterGlobal_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitGlobal_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitGlobal_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Nonlocal_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_nonlocal_stmt;
    }

	NONLOCAL() {
	    return this.getToken(Python3Parser.NONLOCAL, 0);
	};

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterNonlocal_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitNonlocal_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitNonlocal_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Assert_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_assert_stmt;
    }

	ASSERT() {
	    return this.getToken(Python3Parser.ASSERT, 0);
	};

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(Python3Parser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAssert_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAssert_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAssert_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Compound_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_compound_stmt;
    }

	if_stmt() {
	    return this.getTypedRuleContext(If_stmtContext,0);
	};

	while_stmt() {
	    return this.getTypedRuleContext(While_stmtContext,0);
	};

	for_stmt() {
	    return this.getTypedRuleContext(For_stmtContext,0);
	};

	try_stmt() {
	    return this.getTypedRuleContext(Try_stmtContext,0);
	};

	with_stmt() {
	    return this.getTypedRuleContext(With_stmtContext,0);
	};

	funcdef() {
	    return this.getTypedRuleContext(FuncdefContext,0);
	};

	classdef() {
	    return this.getTypedRuleContext(ClassdefContext,0);
	};

	decorated() {
	    return this.getTypedRuleContext(DecoratedContext,0);
	};

	async_stmt() {
	    return this.getTypedRuleContext(Async_stmtContext,0);
	};

	match_stmt() {
	    return this.getTypedRuleContext(Match_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterCompound_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitCompound_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitCompound_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Async_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_async_stmt;
    }

	ASYNC() {
	    return this.getToken(Python3Parser.ASYNC, 0);
	};

	funcdef() {
	    return this.getTypedRuleContext(FuncdefContext,0);
	};

	with_stmt() {
	    return this.getTypedRuleContext(With_stmtContext,0);
	};

	for_stmt() {
	    return this.getTypedRuleContext(For_stmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAsync_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAsync_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAsync_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class If_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_if_stmt;
    }

	IF() {
	    return this.getToken(Python3Parser.IF, 0);
	};

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COLON);
	    } else {
	        return this.getToken(Python3Parser.COLON, i);
	    }
	};


	block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockContext);
	    } else {
	        return this.getTypedRuleContext(BlockContext,i);
	    }
	};

	ELIF = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.ELIF);
	    } else {
	        return this.getToken(Python3Parser.ELIF, i);
	    }
	};


	ELSE() {
	    return this.getToken(Python3Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterIf_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitIf_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitIf_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class While_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_while_stmt;
    }

	WHILE() {
	    return this.getToken(Python3Parser.WHILE, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COLON);
	    } else {
	        return this.getToken(Python3Parser.COLON, i);
	    }
	};


	block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockContext);
	    } else {
	        return this.getTypedRuleContext(BlockContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(Python3Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterWhile_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitWhile_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitWhile_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class For_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_for_stmt;
    }

	FOR() {
	    return this.getToken(Python3Parser.FOR, 0);
	};

	exprlist() {
	    return this.getTypedRuleContext(ExprlistContext,0);
	};

	IN() {
	    return this.getToken(Python3Parser.IN, 0);
	};

	testlist() {
	    return this.getTypedRuleContext(TestlistContext,0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COLON);
	    } else {
	        return this.getToken(Python3Parser.COLON, i);
	    }
	};


	block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockContext);
	    } else {
	        return this.getTypedRuleContext(BlockContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(Python3Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterFor_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitFor_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitFor_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Try_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_try_stmt;
    }

	TRY() {
	    return this.getToken(Python3Parser.TRY, 0);
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COLON);
	    } else {
	        return this.getToken(Python3Parser.COLON, i);
	    }
	};


	block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BlockContext);
	    } else {
	        return this.getTypedRuleContext(BlockContext,i);
	    }
	};

	FINALLY() {
	    return this.getToken(Python3Parser.FINALLY, 0);
	};

	except_clause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Except_clauseContext);
	    } else {
	        return this.getTypedRuleContext(Except_clauseContext,i);
	    }
	};

	ELSE() {
	    return this.getToken(Python3Parser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTry_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTry_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTry_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class With_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_with_stmt;
    }

	WITH() {
	    return this.getToken(Python3Parser.WITH, 0);
	};

	with_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(With_itemContext);
	    } else {
	        return this.getTypedRuleContext(With_itemContext,i);
	    }
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterWith_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitWith_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitWith_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class With_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_with_item;
    }

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	AS() {
	    return this.getToken(Python3Parser.AS, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterWith_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitWith_item(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitWith_item(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Except_clauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_except_clause;
    }

	EXCEPT() {
	    return this.getToken(Python3Parser.EXCEPT, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	AS() {
	    return this.getToken(Python3Parser.AS, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterExcept_clause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitExcept_clause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitExcept_clause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_block;
    }

	simple_stmts() {
	    return this.getTypedRuleContext(Simple_stmtsContext,0);
	};

	NEWLINE() {
	    return this.getToken(Python3Parser.NEWLINE, 0);
	};

	INDENT() {
	    return this.getToken(Python3Parser.INDENT, 0);
	};

	DEDENT() {
	    return this.getToken(Python3Parser.DEDENT, 0);
	};

	stmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StmtContext);
	    } else {
	        return this.getTypedRuleContext(StmtContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterBlock(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitBlock(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Match_stmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_match_stmt;
    }

	MATCH() {
	    return this.getToken(Python3Parser.MATCH, 0);
	};

	subject_expr() {
	    return this.getTypedRuleContext(Subject_exprContext,0);
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	NEWLINE() {
	    return this.getToken(Python3Parser.NEWLINE, 0);
	};

	INDENT() {
	    return this.getToken(Python3Parser.INDENT, 0);
	};

	DEDENT() {
	    return this.getToken(Python3Parser.DEDENT, 0);
	};

	case_block = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Case_blockContext);
	    } else {
	        return this.getTypedRuleContext(Case_blockContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterMatch_stmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitMatch_stmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitMatch_stmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Subject_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_subject_expr;
    }

	star_named_expression() {
	    return this.getTypedRuleContext(Star_named_expressionContext,0);
	};

	COMMA() {
	    return this.getToken(Python3Parser.COMMA, 0);
	};

	star_named_expressions() {
	    return this.getTypedRuleContext(Star_named_expressionsContext,0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterSubject_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitSubject_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitSubject_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Star_named_expressionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_star_named_expressions;
    }

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	star_named_expression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Star_named_expressionContext);
	    } else {
	        return this.getTypedRuleContext(Star_named_expressionContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterStar_named_expressions(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitStar_named_expressions(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitStar_named_expressions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Star_named_expressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_star_named_expression;
    }

	STAR() {
	    return this.getToken(Python3Parser.STAR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterStar_named_expression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitStar_named_expression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitStar_named_expression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Case_blockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_case_block;
    }

	CASE() {
	    return this.getToken(Python3Parser.CASE, 0);
	};

	patterns() {
	    return this.getTypedRuleContext(PatternsContext,0);
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	guard() {
	    return this.getTypedRuleContext(GuardContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterCase_block(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitCase_block(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitCase_block(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GuardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_guard;
    }

	IF() {
	    return this.getToken(Python3Parser.IF, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterGuard(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitGuard(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitGuard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_patterns;
    }

	open_sequence_pattern() {
	    return this.getTypedRuleContext(Open_sequence_patternContext,0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterPatterns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitPatterns(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitPatterns(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PatternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_pattern;
    }

	as_pattern() {
	    return this.getTypedRuleContext(As_patternContext,0);
	};

	or_pattern() {
	    return this.getTypedRuleContext(Or_patternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterPattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitPattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitPattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class As_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_as_pattern;
    }

	or_pattern() {
	    return this.getTypedRuleContext(Or_patternContext,0);
	};

	AS() {
	    return this.getToken(Python3Parser.AS, 0);
	};

	pattern_capture_target() {
	    return this.getTypedRuleContext(Pattern_capture_targetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAs_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAs_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAs_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Or_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_or_pattern;
    }

	closed_pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Closed_patternContext);
	    } else {
	        return this.getTypedRuleContext(Closed_patternContext,i);
	    }
	};

	OR_OP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.OR_OP);
	    } else {
	        return this.getToken(Python3Parser.OR_OP, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterOr_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitOr_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitOr_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Closed_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_closed_pattern;
    }

	literal_pattern() {
	    return this.getTypedRuleContext(Literal_patternContext,0);
	};

	capture_pattern() {
	    return this.getTypedRuleContext(Capture_patternContext,0);
	};

	wildcard_pattern() {
	    return this.getTypedRuleContext(Wildcard_patternContext,0);
	};

	value_pattern() {
	    return this.getTypedRuleContext(Value_patternContext,0);
	};

	group_pattern() {
	    return this.getTypedRuleContext(Group_patternContext,0);
	};

	sequence_pattern() {
	    return this.getTypedRuleContext(Sequence_patternContext,0);
	};

	mapping_pattern() {
	    return this.getTypedRuleContext(Mapping_patternContext,0);
	};

	class_pattern() {
	    return this.getTypedRuleContext(Class_patternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterClosed_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitClosed_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitClosed_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Literal_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_literal_pattern;
    }

	signed_number() {
	    return this.getTypedRuleContext(Signed_numberContext,0);
	};

	complex_number() {
	    return this.getTypedRuleContext(Complex_numberContext,0);
	};

	strings() {
	    return this.getTypedRuleContext(StringsContext,0);
	};

	NONE() {
	    return this.getToken(Python3Parser.NONE, 0);
	};

	TRUE() {
	    return this.getToken(Python3Parser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(Python3Parser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterLiteral_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitLiteral_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitLiteral_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Literal_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_literal_expr;
    }

	signed_number() {
	    return this.getTypedRuleContext(Signed_numberContext,0);
	};

	complex_number() {
	    return this.getTypedRuleContext(Complex_numberContext,0);
	};

	strings() {
	    return this.getTypedRuleContext(StringsContext,0);
	};

	NONE() {
	    return this.getToken(Python3Parser.NONE, 0);
	};

	TRUE() {
	    return this.getToken(Python3Parser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(Python3Parser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterLiteral_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitLiteral_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitLiteral_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Complex_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_complex_number;
    }

	signed_real_number() {
	    return this.getTypedRuleContext(Signed_real_numberContext,0);
	};

	ADD() {
	    return this.getToken(Python3Parser.ADD, 0);
	};

	imaginary_number() {
	    return this.getTypedRuleContext(Imaginary_numberContext,0);
	};

	MINUS() {
	    return this.getToken(Python3Parser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterComplex_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitComplex_number(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitComplex_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Signed_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_signed_number;
    }

	NUMBER() {
	    return this.getToken(Python3Parser.NUMBER, 0);
	};

	MINUS() {
	    return this.getToken(Python3Parser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterSigned_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitSigned_number(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitSigned_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Signed_real_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_signed_real_number;
    }

	real_number() {
	    return this.getTypedRuleContext(Real_numberContext,0);
	};

	MINUS() {
	    return this.getToken(Python3Parser.MINUS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterSigned_real_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitSigned_real_number(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitSigned_real_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Real_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_real_number;
    }

	NUMBER() {
	    return this.getToken(Python3Parser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterReal_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitReal_number(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitReal_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Imaginary_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_imaginary_number;
    }

	NUMBER() {
	    return this.getToken(Python3Parser.NUMBER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterImaginary_number(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitImaginary_number(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitImaginary_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Capture_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_capture_pattern;
    }

	pattern_capture_target() {
	    return this.getTypedRuleContext(Pattern_capture_targetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterCapture_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitCapture_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitCapture_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Pattern_capture_targetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_pattern_capture_target;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterPattern_capture_target(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitPattern_capture_target(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitPattern_capture_target(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Wildcard_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_wildcard_pattern;
    }

	UNDERSCORE() {
	    return this.getToken(Python3Parser.UNDERSCORE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterWildcard_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitWildcard_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitWildcard_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Value_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_value_pattern;
    }

	attr() {
	    return this.getTypedRuleContext(AttrContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterValue_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitValue_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitValue_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_attr;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	DOT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.DOT);
	    } else {
	        return this.getToken(Python3Parser.DOT, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAttr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAttr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAttr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Name_or_attrContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_name_or_attr;
    }

	attr() {
	    return this.getTypedRuleContext(AttrContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterName_or_attr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitName_or_attr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitName_or_attr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Group_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_group_pattern;
    }

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterGroup_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitGroup_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitGroup_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Sequence_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_sequence_pattern;
    }

	OPEN_BRACK() {
	    return this.getToken(Python3Parser.OPEN_BRACK, 0);
	};

	CLOSE_BRACK() {
	    return this.getToken(Python3Parser.CLOSE_BRACK, 0);
	};

	maybe_sequence_pattern() {
	    return this.getTypedRuleContext(Maybe_sequence_patternContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	open_sequence_pattern() {
	    return this.getTypedRuleContext(Open_sequence_patternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterSequence_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitSequence_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitSequence_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Open_sequence_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_open_sequence_pattern;
    }

	maybe_star_pattern() {
	    return this.getTypedRuleContext(Maybe_star_patternContext,0);
	};

	COMMA() {
	    return this.getToken(Python3Parser.COMMA, 0);
	};

	maybe_sequence_pattern() {
	    return this.getTypedRuleContext(Maybe_sequence_patternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterOpen_sequence_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitOpen_sequence_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitOpen_sequence_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Maybe_sequence_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_maybe_sequence_pattern;
    }

	maybe_star_pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Maybe_star_patternContext);
	    } else {
	        return this.getTypedRuleContext(Maybe_star_patternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterMaybe_sequence_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitMaybe_sequence_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitMaybe_sequence_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Maybe_star_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_maybe_star_pattern;
    }

	star_pattern() {
	    return this.getTypedRuleContext(Star_patternContext,0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterMaybe_star_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitMaybe_star_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitMaybe_star_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Star_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_star_pattern;
    }

	STAR() {
	    return this.getToken(Python3Parser.STAR, 0);
	};

	pattern_capture_target() {
	    return this.getTypedRuleContext(Pattern_capture_targetContext,0);
	};

	wildcard_pattern() {
	    return this.getTypedRuleContext(Wildcard_patternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterStar_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitStar_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitStar_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Mapping_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_mapping_pattern;
    }

	OPEN_BRACE() {
	    return this.getToken(Python3Parser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(Python3Parser.CLOSE_BRACE, 0);
	};

	double_star_pattern() {
	    return this.getTypedRuleContext(Double_star_patternContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	items_pattern() {
	    return this.getTypedRuleContext(Items_patternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterMapping_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitMapping_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitMapping_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Items_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_items_pattern;
    }

	key_value_pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Key_value_patternContext);
	    } else {
	        return this.getTypedRuleContext(Key_value_patternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterItems_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitItems_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitItems_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Key_value_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_key_value_pattern;
    }

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	literal_expr() {
	    return this.getTypedRuleContext(Literal_exprContext,0);
	};

	attr() {
	    return this.getTypedRuleContext(AttrContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterKey_value_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitKey_value_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitKey_value_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Double_star_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_double_star_pattern;
    }

	POWER() {
	    return this.getToken(Python3Parser.POWER, 0);
	};

	pattern_capture_target() {
	    return this.getTypedRuleContext(Pattern_capture_targetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterDouble_star_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitDouble_star_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitDouble_star_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Class_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_class_pattern;
    }

	name_or_attr() {
	    return this.getTypedRuleContext(Name_or_attrContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	positional_patterns() {
	    return this.getTypedRuleContext(Positional_patternsContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	keyword_patterns() {
	    return this.getTypedRuleContext(Keyword_patternsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterClass_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitClass_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitClass_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Positional_patternsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_positional_patterns;
    }

	pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PatternContext);
	    } else {
	        return this.getTypedRuleContext(PatternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterPositional_patterns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitPositional_patterns(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitPositional_patterns(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Keyword_patternsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_keyword_patterns;
    }

	keyword_pattern = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Keyword_patternContext);
	    } else {
	        return this.getTypedRuleContext(Keyword_patternContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterKeyword_patterns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitKeyword_patterns(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitKeyword_patterns(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Keyword_patternContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_keyword_pattern;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	ASSIGN() {
	    return this.getToken(Python3Parser.ASSIGN, 0);
	};

	pattern() {
	    return this.getTypedRuleContext(PatternContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterKeyword_pattern(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitKeyword_pattern(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitKeyword_pattern(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TestContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_test;
    }

	or_test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Or_testContext);
	    } else {
	        return this.getTypedRuleContext(Or_testContext,i);
	    }
	};

	IF() {
	    return this.getToken(Python3Parser.IF, 0);
	};

	ELSE() {
	    return this.getToken(Python3Parser.ELSE, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	lambdef() {
	    return this.getTypedRuleContext(LambdefContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTest(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTest(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTest(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Test_nocondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_test_nocond;
    }

	or_test() {
	    return this.getTypedRuleContext(Or_testContext,0);
	};

	lambdef_nocond() {
	    return this.getTypedRuleContext(Lambdef_nocondContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTest_nocond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTest_nocond(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTest_nocond(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LambdefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_lambdef;
    }

	LAMBDA() {
	    return this.getToken(Python3Parser.LAMBDA, 0);
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	varargslist() {
	    return this.getTypedRuleContext(VarargslistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterLambdef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitLambdef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitLambdef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Lambdef_nocondContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_lambdef_nocond;
    }

	LAMBDA() {
	    return this.getToken(Python3Parser.LAMBDA, 0);
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	test_nocond() {
	    return this.getTypedRuleContext(Test_nocondContext,0);
	};

	varargslist() {
	    return this.getTypedRuleContext(VarargslistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterLambdef_nocond(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitLambdef_nocond(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitLambdef_nocond(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Or_testContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_or_test;
    }

	and_test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(And_testContext);
	    } else {
	        return this.getTypedRuleContext(And_testContext,i);
	    }
	};

	OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.OR);
	    } else {
	        return this.getToken(Python3Parser.OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterOr_test(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitOr_test(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitOr_test(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class And_testContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_and_test;
    }

	not_test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Not_testContext);
	    } else {
	        return this.getTypedRuleContext(Not_testContext,i);
	    }
	};

	AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.AND);
	    } else {
	        return this.getToken(Python3Parser.AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAnd_test(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAnd_test(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAnd_test(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Not_testContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_not_test;
    }

	NOT() {
	    return this.getToken(Python3Parser.NOT, 0);
	};

	not_test() {
	    return this.getTypedRuleContext(Not_testContext,0);
	};

	comparison() {
	    return this.getTypedRuleContext(ComparisonContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterNot_test(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitNot_test(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitNot_test(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComparisonContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_comparison;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	comp_op = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Comp_opContext);
	    } else {
	        return this.getTypedRuleContext(Comp_opContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterComparison(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitComparison(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitComparison(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Comp_opContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_comp_op;
    }

	LESS_THAN() {
	    return this.getToken(Python3Parser.LESS_THAN, 0);
	};

	GREATER_THAN() {
	    return this.getToken(Python3Parser.GREATER_THAN, 0);
	};

	EQUALS() {
	    return this.getToken(Python3Parser.EQUALS, 0);
	};

	GT_EQ() {
	    return this.getToken(Python3Parser.GT_EQ, 0);
	};

	LT_EQ() {
	    return this.getToken(Python3Parser.LT_EQ, 0);
	};

	NOT_EQ_1() {
	    return this.getToken(Python3Parser.NOT_EQ_1, 0);
	};

	NOT_EQ_2() {
	    return this.getToken(Python3Parser.NOT_EQ_2, 0);
	};

	IN() {
	    return this.getToken(Python3Parser.IN, 0);
	};

	NOT() {
	    return this.getToken(Python3Parser.NOT, 0);
	};

	IS() {
	    return this.getToken(Python3Parser.IS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterComp_op(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitComp_op(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitComp_op(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Star_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_star_expr;
    }

	STAR() {
	    return this.getToken(Python3Parser.STAR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterStar_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitStar_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitStar_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_expr;
    }

	atom_expr() {
	    return this.getTypedRuleContext(Atom_exprContext,0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	ADD = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.ADD);
	    } else {
	        return this.getToken(Python3Parser.ADD, i);
	    }
	};


	MINUS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.MINUS);
	    } else {
	        return this.getToken(Python3Parser.MINUS, i);
	    }
	};


	NOT_OP = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.NOT_OP);
	    } else {
	        return this.getToken(Python3Parser.NOT_OP, i);
	    }
	};


	POWER() {
	    return this.getToken(Python3Parser.POWER, 0);
	};

	STAR() {
	    return this.getToken(Python3Parser.STAR, 0);
	};

	AT() {
	    return this.getToken(Python3Parser.AT, 0);
	};

	DIV() {
	    return this.getToken(Python3Parser.DIV, 0);
	};

	MOD() {
	    return this.getToken(Python3Parser.MOD, 0);
	};

	IDIV() {
	    return this.getToken(Python3Parser.IDIV, 0);
	};

	LEFT_SHIFT() {
	    return this.getToken(Python3Parser.LEFT_SHIFT, 0);
	};

	RIGHT_SHIFT() {
	    return this.getToken(Python3Parser.RIGHT_SHIFT, 0);
	};

	AND_OP() {
	    return this.getToken(Python3Parser.AND_OP, 0);
	};

	XOR() {
	    return this.getToken(Python3Parser.XOR, 0);
	};

	OR_OP() {
	    return this.getToken(Python3Parser.OR_OP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Atom_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_atom_expr;
    }

	atom() {
	    return this.getTypedRuleContext(AtomContext,0);
	};

	AWAIT() {
	    return this.getToken(Python3Parser.AWAIT, 0);
	};

	trailer = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TrailerContext);
	    } else {
	        return this.getTypedRuleContext(TrailerContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAtom_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAtom_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAtom_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_atom;
    }

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	yield_expr() {
	    return this.getTypedRuleContext(Yield_exprContext,0);
	};

	testlist_comp() {
	    return this.getTypedRuleContext(Testlist_compContext,0);
	};

	OPEN_BRACK() {
	    return this.getToken(Python3Parser.OPEN_BRACK, 0);
	};

	CLOSE_BRACK() {
	    return this.getToken(Python3Parser.CLOSE_BRACK, 0);
	};

	OPEN_BRACE() {
	    return this.getToken(Python3Parser.OPEN_BRACE, 0);
	};

	CLOSE_BRACE() {
	    return this.getToken(Python3Parser.CLOSE_BRACE, 0);
	};

	dictorsetmaker() {
	    return this.getTypedRuleContext(DictorsetmakerContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	NUMBER() {
	    return this.getToken(Python3Parser.NUMBER, 0);
	};

	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.STRING);
	    } else {
	        return this.getToken(Python3Parser.STRING, i);
	    }
	};


	ELLIPSIS() {
	    return this.getToken(Python3Parser.ELLIPSIS, 0);
	};

	NONE() {
	    return this.getToken(Python3Parser.NONE, 0);
	};

	TRUE() {
	    return this.getToken(Python3Parser.TRUE, 0);
	};

	FALSE() {
	    return this.getToken(Python3Parser.FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitAtom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitAtom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_name;
    }

	NAME() {
	    return this.getToken(Python3Parser.NAME, 0);
	};

	UNDERSCORE() {
	    return this.getToken(Python3Parser.UNDERSCORE, 0);
	};

	MATCH() {
	    return this.getToken(Python3Parser.MATCH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Testlist_compContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_testlist_comp;
    }

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	star_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Star_exprContext);
	    } else {
	        return this.getTypedRuleContext(Star_exprContext,i);
	    }
	};

	comp_for() {
	    return this.getTypedRuleContext(Comp_forContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTestlist_comp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTestlist_comp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTestlist_comp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrailerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_trailer;
    }

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	arglist() {
	    return this.getTypedRuleContext(ArglistContext,0);
	};

	OPEN_BRACK() {
	    return this.getToken(Python3Parser.OPEN_BRACK, 0);
	};

	subscriptlist() {
	    return this.getTypedRuleContext(SubscriptlistContext,0);
	};

	CLOSE_BRACK() {
	    return this.getToken(Python3Parser.CLOSE_BRACK, 0);
	};

	DOT() {
	    return this.getToken(Python3Parser.DOT, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTrailer(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTrailer(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTrailer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubscriptlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_subscriptlist;
    }

	subscript_ = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Subscript_Context);
	    } else {
	        return this.getTypedRuleContext(Subscript_Context,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterSubscriptlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitSubscriptlist(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitSubscriptlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Subscript_Context extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_subscript_;
    }

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	sliceop() {
	    return this.getTypedRuleContext(SliceopContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterSubscript_(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitSubscript_(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitSubscript_(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SliceopContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_sliceop;
    }

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterSliceop(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitSliceop(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitSliceop(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_exprlist;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	star_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Star_exprContext);
	    } else {
	        return this.getTypedRuleContext(Star_exprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterExprlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitExprlist(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitExprlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TestlistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_testlist;
    }

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterTestlist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitTestlist(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitTestlist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DictorsetmakerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_dictorsetmaker;
    }

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	COLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COLON);
	    } else {
	        return this.getToken(Python3Parser.COLON, i);
	    }
	};


	POWER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.POWER);
	    } else {
	        return this.getToken(Python3Parser.POWER, i);
	    }
	};


	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	comp_for() {
	    return this.getTypedRuleContext(Comp_forContext,0);
	};

	star_expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Star_exprContext);
	    } else {
	        return this.getTypedRuleContext(Star_exprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterDictorsetmaker(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitDictorsetmaker(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitDictorsetmaker(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClassdefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_classdef;
    }

	CLASS() {
	    return this.getToken(Python3Parser.CLASS, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	COLON() {
	    return this.getToken(Python3Parser.COLON, 0);
	};

	block() {
	    return this.getTypedRuleContext(BlockContext,0);
	};

	OPEN_PAREN() {
	    return this.getToken(Python3Parser.OPEN_PAREN, 0);
	};

	CLOSE_PAREN() {
	    return this.getToken(Python3Parser.CLOSE_PAREN, 0);
	};

	arglist() {
	    return this.getTypedRuleContext(ArglistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterClassdef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitClassdef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitClassdef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArglistContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_arglist;
    }

	argument = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ArgumentContext);
	    } else {
	        return this.getTypedRuleContext(ArgumentContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.COMMA);
	    } else {
	        return this.getToken(Python3Parser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterArglist(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitArglist(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitArglist(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArgumentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_argument;
    }

	test = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TestContext);
	    } else {
	        return this.getTypedRuleContext(TestContext,i);
	    }
	};

	ASSIGN() {
	    return this.getToken(Python3Parser.ASSIGN, 0);
	};

	POWER() {
	    return this.getToken(Python3Parser.POWER, 0);
	};

	STAR() {
	    return this.getToken(Python3Parser.STAR, 0);
	};

	comp_for() {
	    return this.getTypedRuleContext(Comp_forContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterArgument(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitArgument(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitArgument(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Comp_iterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_comp_iter;
    }

	comp_for() {
	    return this.getTypedRuleContext(Comp_forContext,0);
	};

	comp_if() {
	    return this.getTypedRuleContext(Comp_ifContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterComp_iter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitComp_iter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitComp_iter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Comp_forContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_comp_for;
    }

	FOR() {
	    return this.getToken(Python3Parser.FOR, 0);
	};

	exprlist() {
	    return this.getTypedRuleContext(ExprlistContext,0);
	};

	IN() {
	    return this.getToken(Python3Parser.IN, 0);
	};

	or_test() {
	    return this.getTypedRuleContext(Or_testContext,0);
	};

	ASYNC() {
	    return this.getToken(Python3Parser.ASYNC, 0);
	};

	comp_iter() {
	    return this.getTypedRuleContext(Comp_iterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterComp_for(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitComp_for(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitComp_for(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Comp_ifContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_comp_if;
    }

	IF() {
	    return this.getToken(Python3Parser.IF, 0);
	};

	test_nocond() {
	    return this.getTypedRuleContext(Test_nocondContext,0);
	};

	comp_iter() {
	    return this.getTypedRuleContext(Comp_iterContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterComp_if(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitComp_if(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitComp_if(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Encoding_declContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_encoding_decl;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterEncoding_decl(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitEncoding_decl(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitEncoding_decl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Yield_exprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_yield_expr;
    }

	YIELD() {
	    return this.getToken(Python3Parser.YIELD, 0);
	};

	yield_arg() {
	    return this.getTypedRuleContext(Yield_argContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterYield_expr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitYield_expr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitYield_expr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Yield_argContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_yield_arg;
    }

	FROM() {
	    return this.getToken(Python3Parser.FROM, 0);
	};

	test() {
	    return this.getTypedRuleContext(TestContext,0);
	};

	testlist() {
	    return this.getTypedRuleContext(TestlistContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterYield_arg(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitYield_arg(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitYield_arg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = Python3Parser.RULE_strings;
    }

	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(Python3Parser.STRING);
	    } else {
	        return this.getToken(Python3Parser.STRING, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.enterStrings(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof Python3ParserListener ) {
	        listener.exitStrings(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof Python3ParserVisitor ) {
	        return visitor.visitStrings(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




Python3Parser.Single_inputContext = Single_inputContext; 
Python3Parser.File_inputContext = File_inputContext; 
Python3Parser.Eval_inputContext = Eval_inputContext; 
Python3Parser.DecoratorContext = DecoratorContext; 
Python3Parser.DecoratorsContext = DecoratorsContext; 
Python3Parser.DecoratedContext = DecoratedContext; 
Python3Parser.Async_funcdefContext = Async_funcdefContext; 
Python3Parser.FuncdefContext = FuncdefContext; 
Python3Parser.ParametersContext = ParametersContext; 
Python3Parser.TypedargslistContext = TypedargslistContext; 
Python3Parser.TfpdefContext = TfpdefContext; 
Python3Parser.VarargslistContext = VarargslistContext; 
Python3Parser.VfpdefContext = VfpdefContext; 
Python3Parser.StmtContext = StmtContext; 
Python3Parser.Simple_stmtsContext = Simple_stmtsContext; 
Python3Parser.Simple_stmtContext = Simple_stmtContext; 
Python3Parser.Expr_stmtContext = Expr_stmtContext; 
Python3Parser.AnnassignContext = AnnassignContext; 
Python3Parser.Testlist_star_exprContext = Testlist_star_exprContext; 
Python3Parser.AugassignContext = AugassignContext; 
Python3Parser.Del_stmtContext = Del_stmtContext; 
Python3Parser.Pass_stmtContext = Pass_stmtContext; 
Python3Parser.Flow_stmtContext = Flow_stmtContext; 
Python3Parser.Break_stmtContext = Break_stmtContext; 
Python3Parser.Continue_stmtContext = Continue_stmtContext; 
Python3Parser.Return_stmtContext = Return_stmtContext; 
Python3Parser.Yield_stmtContext = Yield_stmtContext; 
Python3Parser.Raise_stmtContext = Raise_stmtContext; 
Python3Parser.Import_stmtContext = Import_stmtContext; 
Python3Parser.Import_nameContext = Import_nameContext; 
Python3Parser.Import_fromContext = Import_fromContext; 
Python3Parser.Import_as_nameContext = Import_as_nameContext; 
Python3Parser.Dotted_as_nameContext = Dotted_as_nameContext; 
Python3Parser.Import_as_namesContext = Import_as_namesContext; 
Python3Parser.Dotted_as_namesContext = Dotted_as_namesContext; 
Python3Parser.Dotted_nameContext = Dotted_nameContext; 
Python3Parser.Global_stmtContext = Global_stmtContext; 
Python3Parser.Nonlocal_stmtContext = Nonlocal_stmtContext; 
Python3Parser.Assert_stmtContext = Assert_stmtContext; 
Python3Parser.Compound_stmtContext = Compound_stmtContext; 
Python3Parser.Async_stmtContext = Async_stmtContext; 
Python3Parser.If_stmtContext = If_stmtContext; 
Python3Parser.While_stmtContext = While_stmtContext; 
Python3Parser.For_stmtContext = For_stmtContext; 
Python3Parser.Try_stmtContext = Try_stmtContext; 
Python3Parser.With_stmtContext = With_stmtContext; 
Python3Parser.With_itemContext = With_itemContext; 
Python3Parser.Except_clauseContext = Except_clauseContext; 
Python3Parser.BlockContext = BlockContext; 
Python3Parser.Match_stmtContext = Match_stmtContext; 
Python3Parser.Subject_exprContext = Subject_exprContext; 
Python3Parser.Star_named_expressionsContext = Star_named_expressionsContext; 
Python3Parser.Star_named_expressionContext = Star_named_expressionContext; 
Python3Parser.Case_blockContext = Case_blockContext; 
Python3Parser.GuardContext = GuardContext; 
Python3Parser.PatternsContext = PatternsContext; 
Python3Parser.PatternContext = PatternContext; 
Python3Parser.As_patternContext = As_patternContext; 
Python3Parser.Or_patternContext = Or_patternContext; 
Python3Parser.Closed_patternContext = Closed_patternContext; 
Python3Parser.Literal_patternContext = Literal_patternContext; 
Python3Parser.Literal_exprContext = Literal_exprContext; 
Python3Parser.Complex_numberContext = Complex_numberContext; 
Python3Parser.Signed_numberContext = Signed_numberContext; 
Python3Parser.Signed_real_numberContext = Signed_real_numberContext; 
Python3Parser.Real_numberContext = Real_numberContext; 
Python3Parser.Imaginary_numberContext = Imaginary_numberContext; 
Python3Parser.Capture_patternContext = Capture_patternContext; 
Python3Parser.Pattern_capture_targetContext = Pattern_capture_targetContext; 
Python3Parser.Wildcard_patternContext = Wildcard_patternContext; 
Python3Parser.Value_patternContext = Value_patternContext; 
Python3Parser.AttrContext = AttrContext; 
Python3Parser.Name_or_attrContext = Name_or_attrContext; 
Python3Parser.Group_patternContext = Group_patternContext; 
Python3Parser.Sequence_patternContext = Sequence_patternContext; 
Python3Parser.Open_sequence_patternContext = Open_sequence_patternContext; 
Python3Parser.Maybe_sequence_patternContext = Maybe_sequence_patternContext; 
Python3Parser.Maybe_star_patternContext = Maybe_star_patternContext; 
Python3Parser.Star_patternContext = Star_patternContext; 
Python3Parser.Mapping_patternContext = Mapping_patternContext; 
Python3Parser.Items_patternContext = Items_patternContext; 
Python3Parser.Key_value_patternContext = Key_value_patternContext; 
Python3Parser.Double_star_patternContext = Double_star_patternContext; 
Python3Parser.Class_patternContext = Class_patternContext; 
Python3Parser.Positional_patternsContext = Positional_patternsContext; 
Python3Parser.Keyword_patternsContext = Keyword_patternsContext; 
Python3Parser.Keyword_patternContext = Keyword_patternContext; 
Python3Parser.TestContext = TestContext; 
Python3Parser.Test_nocondContext = Test_nocondContext; 
Python3Parser.LambdefContext = LambdefContext; 
Python3Parser.Lambdef_nocondContext = Lambdef_nocondContext; 
Python3Parser.Or_testContext = Or_testContext; 
Python3Parser.And_testContext = And_testContext; 
Python3Parser.Not_testContext = Not_testContext; 
Python3Parser.ComparisonContext = ComparisonContext; 
Python3Parser.Comp_opContext = Comp_opContext; 
Python3Parser.Star_exprContext = Star_exprContext; 
Python3Parser.ExprContext = ExprContext; 
Python3Parser.Atom_exprContext = Atom_exprContext; 
Python3Parser.AtomContext = AtomContext; 
Python3Parser.NameContext = NameContext; 
Python3Parser.Testlist_compContext = Testlist_compContext; 
Python3Parser.TrailerContext = TrailerContext; 
Python3Parser.SubscriptlistContext = SubscriptlistContext; 
Python3Parser.Subscript_Context = Subscript_Context; 
Python3Parser.SliceopContext = SliceopContext; 
Python3Parser.ExprlistContext = ExprlistContext; 
Python3Parser.TestlistContext = TestlistContext; 
Python3Parser.DictorsetmakerContext = DictorsetmakerContext; 
Python3Parser.ClassdefContext = ClassdefContext; 
Python3Parser.ArglistContext = ArglistContext; 
Python3Parser.ArgumentContext = ArgumentContext; 
Python3Parser.Comp_iterContext = Comp_iterContext; 
Python3Parser.Comp_forContext = Comp_forContext; 
Python3Parser.Comp_ifContext = Comp_ifContext; 
Python3Parser.Encoding_declContext = Encoding_declContext; 
Python3Parser.Yield_exprContext = Yield_exprContext; 
Python3Parser.Yield_argContext = Yield_argContext; 
Python3Parser.StringsContext = StringsContext; 
